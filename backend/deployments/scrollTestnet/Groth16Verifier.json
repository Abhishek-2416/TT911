{
  "address": "0x14d81cA00046c863D72b6a0e299dA243F08C999e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "_pA",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "_pB",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_pC",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[3]",
          "name": "_pubSignals",
          "type": "uint256[3]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x919c3d45cd0c34c56342411ca2d1caf9ac5211ed7a0aab5c95087c66537d22d2",
  "receipt": {
    "to": null,
    "from": "0x1B150538E943F00127929f7eeB65754f7beB0B6d",
    "contractAddress": "0x14d81cA00046c863D72b6a0e299dA243F08C999e",
    "transactionIndex": 0,
    "gasUsed": "428002",
    "logsBloom": "0x
    "blockHash": "0x3ae9b04fede2eb30db5b9e8950823588cfad2581cb3d9fe79f60aa0cd663b057",
    "transactionHash": "0x919c3d45cd0c34c56342411ca2d1caf9ac5211ed7a0aab5c95087c66537d22d2",
    "logs": [],
    "blockNumber": 2541505,
    "cumulativeGasUsed": "428002",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1b4072aafd2258e407ae208877268c40",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_pA\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"_pB\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_pC\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[3]\",\"name\":\"_pubSignals\",\"type\":\"uint256[3]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Verifier.sol\":\"Groth16Verifier\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/Verifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n/*\\n    Copyright 2021 0KIMS association.\\n\\n    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).\\n\\n    snarkJS is a free software: you can redistribute it and/or modify it\\n    under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\\n    License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract Groth16Verifier {\\n    // Scalar field size\\n    uint256 constant r = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    // Base field size\\n    uint256 constant q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    // Verification Key data\\n    uint256 constant alphax = 1990491058042507724254531647052605187474668143610679805636247533142131809156;\\n    uint256 constant alphay = 17477250898117459370570098708953425781081196849647504828348097720432779817798;\\n    uint256 constant betax1 = 18379846640421875217892784056040387653832593361753158173421065252666656957372;\\n    uint256 constant betax2 = 10632749047985076869668067614147501294688533024606653817127560325528233522161;\\n    uint256 constant betay1 = 5933783442574464985157330861546146253189200943784866855958050185656606877150;\\n    uint256 constant betay2 = 10894355898925596151150333935528223340672791319100498264155536969325794434553;\\n    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n    uint256 constant deltax1 = 21080986837172612094444362534432851052017489625175320705026885934702997613016;\\n    uint256 constant deltax2 = 11291302162980152001275830085127813812748333428793104427971399711603833212687;\\n    uint256 constant deltay1 = 9061154402828168705352157591804654649288025760538176786539560141554749361695;\\n    uint256 constant deltay2 = 2627302175969897931811927687741030511979176199718031375541600144786611876632;\\n\\n    uint256 constant IC0x = 307739951028349522376628541915758938559098434068969938988824316323210405072;\\n    uint256 constant IC0y = 9814790867621332089114334862248288947935100072968893375682188637449002688653;\\n\\n    uint256 constant IC1x = 6236269019540270289738012187427587886319799969000315251226603694303980314021;\\n    uint256 constant IC1y = 9436322420098389537766917348729449340231580754534721619894505989208820826859;\\n\\n    uint256 constant IC2x = 10382308315157152530998522694935622247108648250500050006379319567591190545422;\\n    uint256 constant IC2y = 11177231060708742743358324988553470547814400821948073313753773706989847295644;\\n\\n    uint256 constant IC3x = 3408663513345353973053132612265015137557556841684826865694471459344719427303;\\n    uint256 constant IC3y = 10272416661617104036394590923859909187480648619637684251560066426368659564981;\\n\\n    // Memory data\\n    uint16 constant pVk = 0;\\n    uint16 constant pPairing = 128;\\n\\n    uint16 constant pLastMem = 896;\\n\\n    function verifyProof(\\n        uint256[2] calldata _pA,\\n        uint256[2][2] calldata _pB,\\n        uint256[2] calldata _pC,\\n        uint256[3] calldata _pubSignals\\n    ) public view returns (bool) {\\n        assembly {\\n            function checkField(v) {\\n                if iszero(lt(v, q)) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n\\n            // G1 function to multiply a G1 value(x,y) to value in an address\\n            function g1_mulAccC(pR, x, y, s) {\\n                let success\\n                let mIn := mload(0x40)\\n                mstore(mIn, x)\\n                mstore(add(mIn, 32), y)\\n                mstore(add(mIn, 64), s)\\n\\n                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n\\n                mstore(add(mIn, 64), mload(pR))\\n                mstore(add(mIn, 96), mload(add(pR, 32)))\\n\\n                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n\\n            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {\\n                let _pPairing := add(pMem, pPairing)\\n                let _pVk := add(pMem, pVk)\\n\\n                mstore(_pVk, IC0x)\\n                mstore(add(_pVk, 32), IC0y)\\n\\n                // Compute the linear combination vk_x\\n\\n                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))\\n\\n                g1_mulAccC(_pVk, IC2x, IC2y, calldataload(add(pubSignals, 32)))\\n\\n                g1_mulAccC(_pVk, IC3x, IC3y, calldataload(add(pubSignals, 64)))\\n\\n                // -A\\n                mstore(_pPairing, calldataload(pA))\\n                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))\\n\\n                // B\\n                mstore(add(_pPairing, 64), calldataload(pB))\\n                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))\\n                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))\\n                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))\\n\\n                // alpha1\\n                mstore(add(_pPairing, 192), alphax)\\n                mstore(add(_pPairing, 224), alphay)\\n\\n                // beta2\\n                mstore(add(_pPairing, 256), betax1)\\n                mstore(add(_pPairing, 288), betax2)\\n                mstore(add(_pPairing, 320), betay1)\\n                mstore(add(_pPairing, 352), betay2)\\n\\n                // vk_x\\n                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))\\n                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))\\n\\n                // gamma2\\n                mstore(add(_pPairing, 448), gammax1)\\n                mstore(add(_pPairing, 480), gammax2)\\n                mstore(add(_pPairing, 512), gammay1)\\n                mstore(add(_pPairing, 544), gammay2)\\n\\n                // C\\n                mstore(add(_pPairing, 576), calldataload(pC))\\n                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))\\n\\n                // delta2\\n                mstore(add(_pPairing, 640), deltax1)\\n                mstore(add(_pPairing, 672), deltax2)\\n                mstore(add(_pPairing, 704), deltay1)\\n                mstore(add(_pPairing, 736), deltay2)\\n\\n                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)\\n\\n                isOk := and(success, mload(_pPairing))\\n            }\\n\\n            let pMem := mload(0x40)\\n            mstore(0x40, add(pMem, pLastMem))\\n\\n            // Validate that all evaluations \\u2208 F\\n\\n            checkField(calldataload(add(_pubSignals, 0)))\\n\\n            checkField(calldataload(add(_pubSignals, 32)))\\n\\n            checkField(calldataload(add(_pubSignals, 64)))\\n\\n            checkField(calldataload(add(_pubSignals, 96)))\\n\\n            // Validate all evaluations\\n            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)\\n\\n            mstore(0, isValid)\\n            return(0, 0x20)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x94aa902781b400b2df949a2f08597c113c979c89b6b7b72e7bab583566d124bd\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506106c7806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806311479fea14610030575b600080fd5b61004a600480360381019061004591906105f2565b610060565b6040516100579190610676565b60405180910390f35b600061052c565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478110610098576000805260206000f35b50565b600060405183815284602082015285604082015260408160608360076107d05a03fa9150816100ce576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa9150816100fe576000805260206000f35b505050505050565b600060808601600087017eae2cb5311105dd4d7323d4648ee19970b27cba3cc5cf82bbe7913860b324d081527f15b2f98a89f684001e80829ac9d9b679299f7d5e79d2ca1f16ad1c2994ec208d60208201526101a860008801357f14dcc4eb9ae05612ce719eb7ce0d3294b273a12bdcd0a44d81b66babe90a42eb7f0dc99a6a0bd3e27ce9eef72dbf01e2a5a98546c4cb2d2170ee378497c5d45da58461009b565b6101f860208801357f18b616adfaf87409a119223c28b9b3671245a4a0ea83aa6d5548015249d9b69c7f16f42da29bf0a4f4cefc42b8c58000cbfdf6865d277ed859506711550d6fc40e8461009b565b61024860408801357f16b5fb56a30e926fb4626bb6d581c28b1c93648a7259821ee6f6431dd14c29b57f07893c34b1786d58c97c31dc0a2979568ae9f3dd79b71fa0be3df06d4dc236e78461009b565b833582527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208501357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020830152843560408301526020850135606083015260408501356080830152606085013560a08301527f046693f8c0f8c36a4554e851f2dae6395a7d44aea01383d5ec1456164f771b8460c08301527f26a3c60148b732fce0f2fedb98997496b1c8cde8b41db4a9f0d738446c93734660e08301527f28a29fe212cd32c59aabe100218306fd214c0c9ff2486f1a26390aec205023bc6101008301527f1781ec35acce284f39f346ae3f9cc76e49aa1e7a3d17d5511105eecdc92d33f16101208301527f0d1e67046ba2359f23206d6388d7280676dcfbcbc926c52d72180b208d7765de6101408301527f1815fca714aa77b27b8bf0c7d629132b9b2199d0ee60906cfd5e0e6f3fce1df9610160830152600088015161018083015260206000018801516101a08301527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08301527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08301527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008301527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220830152853561024083015260208601356102608301527f2e9b6a6c63d7d75ab32f9870b0b17c4c8732eeffd3a8e166435d34d0512529d86102808301527f18f6a68a526c1418e39af1bdf03a94664608929a3812290edb3625a54c408f0f6102a08301527f14086e806ed834620f7b18cd77c1257750ca18c270e57a8dca3206d3f1914e1f6102c08301527f05cf0015e88119a90812b8dcfa44d97c2a1e2fa532aa7afcdecb9a43bd81b3186102e08301526020826103008460086107d05a03fa82518116935050505095945050505050565b60405161038081016040526105446000840135610067565b6105516020840135610067565b61055e6040840135610067565b61056b6060840135610067565b610578818486888a610106565b8060005260206000f35b600080fd5b600080fd5b6000819050826020600202820111156105a8576105a7610587565b5b92915050565b6000819050826040600202820111156105ca576105c9610587565b5b92915050565b6000819050826020600302820111156105ec576105eb610587565b5b92915050565b600080600080610160858703121561060d5761060c610582565b5b600061061b8782880161058c565b945050604061062c878288016105ae565b93505060c061063d8782880161058c565b92505061010061064f878288016105d0565b91505092959194509250565b60008115159050919050565b6106708161065b565b82525050565b600060208201905061068b6000830184610667565b9291505056fea2646970667358221220450e3606ac1bcd4d7f500eaa74ae7793634d10a4d41b1e9d7ded5d464f644d1e64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806311479fea14610030575b600080fd5b61004a600480360381019061004591906105f2565b610060565b6040516100579190610676565b60405180910390f35b600061052c565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478110610098576000805260206000f35b50565b600060405183815284602082015285604082015260408160608360076107d05a03fa9150816100ce576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa9150816100fe576000805260206000f35b505050505050565b600060808601600087017eae2cb5311105dd4d7323d4648ee19970b27cba3cc5cf82bbe7913860b324d081527f15b2f98a89f684001e80829ac9d9b679299f7d5e79d2ca1f16ad1c2994ec208d60208201526101a860008801357f14dcc4eb9ae05612ce719eb7ce0d3294b273a12bdcd0a44d81b66babe90a42eb7f0dc99a6a0bd3e27ce9eef72dbf01e2a5a98546c4cb2d2170ee378497c5d45da58461009b565b6101f860208801357f18b616adfaf87409a119223c28b9b3671245a4a0ea83aa6d5548015249d9b69c7f16f42da29bf0a4f4cefc42b8c58000cbfdf6865d277ed859506711550d6fc40e8461009b565b61024860408801357f16b5fb56a30e926fb4626bb6d581c28b1c93648a7259821ee6f6431dd14c29b57f07893c34b1786d58c97c31dc0a2979568ae9f3dd79b71fa0be3df06d4dc236e78461009b565b833582527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208501357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020830152843560408301526020850135606083015260408501356080830152606085013560a08301527f046693f8c0f8c36a4554e851f2dae6395a7d44aea01383d5ec1456164f771b8460c08301527f26a3c60148b732fce0f2fedb98997496b1c8cde8b41db4a9f0d738446c93734660e08301527f28a29fe212cd32c59aabe100218306fd214c0c9ff2486f1a26390aec205023bc6101008301527f1781ec35acce284f39f346ae3f9cc76e49aa1e7a3d17d5511105eecdc92d33f16101208301527f0d1e67046ba2359f23206d6388d7280676dcfbcbc926c52d72180b208d7765de6101408301527f1815fca714aa77b27b8bf0c7d629132b9b2199d0ee60906cfd5e0e6f3fce1df9610160830152600088015161018083015260206000018801516101a08301527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08301527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08301527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008301527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220830152853561024083015260208601356102608301527f2e9b6a6c63d7d75ab32f9870b0b17c4c8732eeffd3a8e166435d34d0512529d86102808301527f18f6a68a526c1418e39af1bdf03a94664608929a3812290edb3625a54c408f0f6102a08301527f14086e806ed834620f7b18cd77c1257750ca18c270e57a8dca3206d3f1914e1f6102c08301527f05cf0015e88119a90812b8dcfa44d97c2a1e2fa532aa7afcdecb9a43bd81b3186102e08301526020826103008460086107d05a03fa82518116935050505095945050505050565b60405161038081016040526105446000840135610067565b6105516020840135610067565b61055e6040840135610067565b61056b6060840135610067565b610578818486888a610106565b8060005260206000f35b600080fd5b600080fd5b6000819050826020600202820111156105a8576105a7610587565b5b92915050565b6000819050826040600202820111156105ca576105c9610587565b5b92915050565b6000819050826020600302820111156105ec576105eb610587565b5b92915050565b600080600080610160858703121561060d5761060c610582565b5b600061061b8782880161058c565b945050604061062c878288016105ae565b93505060c061063d8782880161058c565b92505061010061064f878288016105d0565b91505092959194509250565b60008115159050919050565b6106708161065b565b82525050565b600060208201905061068b6000830184610667565b9291505056fea2646970667358221220450e3606ac1bcd4d7f500eaa74ae7793634d10a4d41b1e9d7ded5d464f644d1e64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}