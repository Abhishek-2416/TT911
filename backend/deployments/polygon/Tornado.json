{
  "address": "0x3f936Fc2a8797285484349eC0bB5F43c25609e6D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_hasher",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_relayer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_loanPercent",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_weth",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "commitment",
          "type": "uint256"
        }
      ],
      "name": "CommitmentAlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "IndexOutOfBound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidProof",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRoot",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MerkleTreeFull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NullifierAlreadyUsed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PaymentFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WrongAmountDeposited",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "root",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[10]",
          "name": "hashPairings",
          "type": "uint256[10]"
        },
        {
          "indexed": false,
          "internalType": "uint8[10]",
          "name": "pairDirections",
          "type": "uint8[10]"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "premium",
          "type": "uint256"
        }
      ],
      "name": "FlashLoanEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nullifierHash",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "commitment",
          "type": "uint256"
        }
      ],
      "name": "commitments",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isRegistered",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "denomination",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_commitment",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "receiverAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "executeFlashLoanSimple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasher",
      "outputs": [
        {
          "internalType": "contract Hasher",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "root",
          "type": "uint256"
        }
      ],
      "name": "knownRoots",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isKnown",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "level",
          "type": "uint8"
        }
      ],
      "name": "lastLevelHash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "levelHash",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextLeafIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nullifier",
          "type": "uint256"
        }
      ],
      "name": "nullifiers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "hasBeenUsed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treeLevel",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifier",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "a",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "b",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "c",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "input",
          "type": "uint256[2]"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe784cebf42c3c8c35a8c111a427a8d28ba78fc23575da7c1940fd4db6345df10",
  "receipt": {
    "to": null,
    "from": "0x1B150538E943F00127929f7eeB65754f7beB0B6d",
    "contractAddress": "0x3f936Fc2a8797285484349eC0bB5F43c25609e6D",
    "transactionIndex": 3,
    "gasUsed": "2069466",
    "logsBloom": "0x
    "blockHash": "0x496e3d3042e3db7b29b3e1a4317729184be4b34e3e87e53b00a8e99a3bed35f6",
    "transactionHash": "0xe784cebf42c3c8c35a8c111a427a8d28ba78fc23575da7c1940fd4db6345df10",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 43395009,
        "transactionHash": "0xe784cebf42c3c8c35a8c111a427a8d28ba78fc23575da7c1940fd4db6345df10",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000001b150538e943f00127929f7eeb65754f7beb0b6d",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x000000000000000000000000000000000000000000000000004985af00327e3a0000000000000000000000000000000000000000000000016f356a4b21da50610000000000000000000000000000000000000000000013a2977d4e8df97d98ee0000000000000000000000000000000000000000000000016eebe49c21a7d2270000000000000000000000000000000000000000000013a297c6d43cf9b01728",
        "logIndex": 7,
        "blockHash": "0x496e3d3042e3db7b29b3e1a4317729184be4b34e3e87e53b00a8e99a3bed35f6"
      }
    ],
    "blockNumber": 43395009,
    "cumulativeGasUsed": "2243954",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xcEc3e6a380ef047517643114708a27D4806E1179",
    "0xa4513C7058f1b2107e1DFf2e8E9E0fD055087DEf",
    "0x6C55782683dA33FA742B71f89F0dF88fFcBD6F28",
    1000000000000000,
    "0x7b79995e5f793A07Bc00c21412e50Ecae098E7f9"
  ],
  "numDeployments": 2,
  "solcInputHash": "07e53124181e077a7890c2a30dd82b69",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hasher\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_relayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_loanPercent\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"commitment\",\"type\":\"uint256\"}],\"name\":\"CommitmentAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"IndexOutOfBound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRoot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MerkleTreeFull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullifierAlreadyUsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PaymentFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WrongAmountDeposited\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[10]\",\"name\":\"hashPairings\",\"type\":\"uint256[10]\"},{\"indexed\":false,\"internalType\":\"uint8[10]\",\"name\":\"pairDirections\",\"type\":\"uint8[10]\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"}],\"name\":\"FlashLoanEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nullifierHash\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"commitment\",\"type\":\"uint256\"}],\"name\":\"commitments\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denomination\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_commitment\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiverAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"executeFlashLoanSimple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasher\",\"outputs\":[{\"internalType\":\"contract Hasher\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"}],\"name\":\"knownRoots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isKnown\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"lastLevelHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"levelHash\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextLeafIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nullifier\",\"type\":\"uint256\"}],\"name\":\"nullifiers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasBeenUsed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treeLevel\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"input\",\"type\":\"uint256[2]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Tornado.sol\":\"Tornado\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"src/Hasher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ncontract Hasher {\\n    uint256 p = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    uint256[20] c = [\\n        0,\\n        105459342437457812771135172323083229699880076558714389201963426671496941082218,\\n        44701464856968139370917285707027820936722631087422041426223071261295627070036,\\n        41130458804021533314412899450586326522500270054983374850973845129658305660915,\\n        28034035305707963547093327110582394283920526326883215327933669381957202488237,\\n        67835101927061504797267889999629546147998413041540252422300881129244644115080,\\n        77038500041308678193056750316134029091500078767515237185085918316009128923853,\\n        104544454093982446733027218848029782092179398179105058587091749747719757285036,\\n        22185654124844698314055180464281947193548886457852406483524286412315521924078,\\n        11843198404908081669891232877866372505664551940087258443425983951700839758573,\\n        75730223139679823188252090137101366517592105358927914928435294176125136703785,\\n        63037111269339665253951994986804650300724512054442194752074821492998493619346,\\n        100222574878814648498017222491060355999208577101797160841662251588925373209270,\\n        16506531590690913941192929825193131037149846497963759319950973398493215082721,\\n        25870657958016487342382077423324595640085963189536902617468804520968505489214,\\n        3776681458614062867704305576886405923644290248776498775782616919101874199765,\\n        28467337724409730306364372414422354542968529509867349778522341896421740722671,\\n        66613445942499043245107522483384164860482134785917043209657158812816523619396,\\n        8730377214678666664395213446285196951160996012879518134438322009847352589864,\\n        71182301344205212203724160442778867079219260050250374209369439265688715521804\\n    ];\\n\\n    function MiMC5Feisel(uint256 iL, uint256 iR, uint256 k) public view returns (uint256, uint256) {\\n        uint256 nRounds = 20;\\n\\n        uint256 lastL;\\n        uint256 lastR;\\n\\n        lastL = iL;\\n        lastR = iR;\\n\\n        uint256 base;\\n        uint256 base2;\\n        uint256 base4;\\n        uint256 temp;\\n\\n        for (uint256 i; i < nRounds; i++) {\\n            base = addmod(addmod(lastR, k, p), c[i], p);\\n            base2 = mulmod(base, base, p);\\n            base4 = mulmod(base2, base2, p);\\n            temp = lastR;\\n            lastR = addmod(lastL, mulmod(base, base4, p), p);\\n            lastL = temp;\\n        }\\n\\n        return (lastL, lastR);\\n    }\\n\\n    function MiMC5Sponge(uint256[] memory elements, uint256 k) public view returns (uint256) {\\n        uint256 lastR;\\n        uint256 lastC;\\n\\n        uint256 length = elements.length;\\n        for (uint256 i; i < length; i++) {\\n            (lastR, lastC) = MiMC5Feisel(addmod(lastR, elements[i], p), lastC, k);\\n        }\\n\\n        return lastR;\\n    }\\n}\\n\",\"keccak256\":\"0x198d668f875aee6db1ffc6b691a6e0aedb4f0993bb8aaeea2782655091e53174\",\"license\":\"MIT\"},\"src/IFlashLoanReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IFlashLoanSimpleReceiver\\n * @author Aave\\n * @notice Defines the basic interface of a flashloan-receiver contract.\\n * @dev Implement this interface to develop a flashloan-compatible flashLoanReceiver contract\\n */\\ninterface IFlashLoanReceiver {\\n  /**\\n   * @notice Executes an operation after receiving the flash-borrowed asset\\n   * @dev Ensure that the contract can return the debt + premium, e.g., has\\n   *      enough funds to repay and has approved the Pool to pull the total amount\\n   * @param amount The amount of the flash-borrowed asset\\n   * @param fee The fee of the flash-borrowed asset\\n   * @param initiator The address of the flashloan initiator\\n   * @return True if the execution of the operation succeeds, false otherwise\\n   */\\n  function executeOperation(\\n    uint256 amount,\\n    uint256 fee,\\n    address initiator\\n  ) external returns (bool);\\n\\n\\n}\",\"keccak256\":\"0x9c7a4699fea6c6109a3ca4bbfbcb381d1850c0ab3a7128f55dfb10857f788498\",\"license\":\"AGPL-3.0\"},\"src/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity >=0.4.0;\\n\\ninterface IWETH9 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function balanceOf(address) external view returns (uint);\\n\\n    function allowance(address, address) external view returns (uint);\\n\\n    receive() external payable;\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint wad) external;\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function approve(address guy, uint wad) external returns (bool);\\n\\n    function transfer(address dst, uint wad) external returns (bool);\\n\\n    function transferFrom(address src, address dst, uint wad)\\n    external\\n    returns (bool);\\n}\",\"keccak256\":\"0xe9e4c62ac7fd62cc96d6bc5a35216b40013c363dd000687f9742bca9762b111c\",\"license\":\"AGPL-3.0\"},\"src/Tornado.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {Hasher} from \\\"./Hasher.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./IFlashLoanReceiver.sol\\\";\\nimport \\\"./IWETH9.sol\\\";\\n\\ninterface IVerifier {\\n    function verifyProof(\\n        uint256[2] calldata _pA,\\n        uint256[2][2] calldata _pB,\\n        uint256[2] calldata _pC,\\n        uint256[3] calldata _pubSignals\\n    ) external;\\n}\\n\\ncontract Tornado is ReentrancyGuard {\\n    error WrongAmountDeposited(uint256 amount);\\n    error CommitmentAlreadyRegistered(uint256 commitment);\\n    error MerkleTreeFull();\\n    error IndexOutOfBound(uint256 index);\\n    error InvalidRoot();\\n    error NullifierAlreadyUsed();\\n    error InvalidProof();\\n    error PaymentFailed();\\n\\n    event Deposit(uint256 root, uint256[10] hashPairings, uint8[10] pairDirections);\\n    event Withdrawal(address to, uint256 nullifierHash);\\n\\n    Hasher public hasher;\\n    address public verifier;\\n\\n    uint8 public treeLevel = 10;\\n    uint256 public denomination = 0.1 ether;\\n    uint256 public nextLeafIndex;\\n    uint256 loanPercent;\\n    address payable relayer;\\n    address payable weth;\\n    uint256 internal constant PERCENTAGE_FACTOR = 1e4;\\n    // Half percentage factor (50.00%)\\n    uint256 internal constant HALF_PERCENTAGE_FACTOR = 0.5e4;\\n\\n    mapping(uint256 root => bool isKnown) public knownRoots;\\n    mapping(uint8 level => uint256 levelHash) public lastLevelHash;\\n    mapping(uint256 nullifier => bool hasBeenUsed) public nullifiers;\\n    mapping(uint256 commitment => bool isRegistered) public commitments;\\n\\n    event FlashLoanEvent(\\n        address indexed target,\\n        address initiator,\\n        uint256 amount,\\n        uint256 premium\\n    );\\n\\n    constructor(address _hasher, address _verifier, address payable _relayer, uint256 _loanPercent, address payable _weth) {\\n        hasher = Hasher(_hasher);\\n        verifier = _verifier;\\n        loanPercent = _loanPercent;\\n        relayer = _relayer;\\n        weth = _weth;\\n    }\\n\\n    function deposit(uint256 _commitment) external payable nonReentrant {\\n        if (msg.value != denomination) {\\n            revert WrongAmountDeposited(msg.value);\\n        }\\n        if (commitments[_commitment]) {\\n            revert CommitmentAlreadyRegistered(_commitment);\\n        }\\n        if (nextLeafIndex > 2 ** treeLevel - 1) {\\n            revert MerkleTreeFull();\\n        }\\n\\n        uint256 newRoot;\\n        uint256[10] memory hashPairings;\\n        uint8[10] memory hashDirections; // 0 means left, 1 means right\\n\\n        uint256 currentIndex = nextLeafIndex;\\n        uint256 currentHash = _commitment;\\n\\n        uint256 right;\\n        uint256 left;\\n        uint256[] memory MiMC5SpongeInputs = new uint256[](2);\\n\\n        for (uint8 i; i < treeLevel; i++) {\\n            lastLevelHash[treeLevel] = currentHash;\\n\\n            if (currentIndex % 2 == 0) {\\n                left = currentHash;\\n                right = levelDefaults(i);\\n                hashPairings[i] = levelDefaults(i);\\n                hashDirections[i] = 0;\\n            } else {\\n                left = lastLevelHash[i];\\n                right = currentHash;\\n                hashPairings[i] = lastLevelHash[i];\\n                hashDirections[i] = 1;\\n            }\\n\\n            MiMC5SpongeInputs[0] = left;\\n            MiMC5SpongeInputs[1] = right;\\n\\n            (uint256 hashResult) = hasher.MiMC5Sponge(MiMC5SpongeInputs, _commitment);\\n\\n            currentHash = hashResult;\\n            currentIndex /= 2;\\n        }\\n\\n        newRoot = currentHash;\\n        knownRoots[newRoot] = true;\\n        ++nextLeafIndex;\\n        commitments[_commitment] = true;\\n\\n        emit Deposit(newRoot, hashPairings, hashDirections);\\n    }\\n\\n    function withdraw(uint256[2] memory a, uint256[2][2] memory b, uint256[2] memory c, uint256[2] memory input)\\n        external\\n        nonReentrant\\n    {\\n        uint256 root = input[0];\\n        uint256 nullifierHash = input[1];\\n\\n        if (!knownRoots[root]) {\\n            revert InvalidRoot();\\n        }\\n        if (nullifiers[nullifierHash]) {\\n            revert NullifierAlreadyUsed();\\n        }\\n        (bool success,) = verifier.call(\\n            abi.encodeWithSignature(\\n                \\\"verifyProof(uint256[2],uint256[2][2],uint256[2],uint256[3])\\\",\\n                a,\\n                b,\\n                c,\\n                [root, nullifierHash, uint256(uint160(msg.sender))]\\n            )\\n        );\\n        if(!success){\\n            revert InvalidProof();\\n        }\\n        nullifiers[nullifierHash] = true;\\n        (bool paymentOk, ) = msg.sender.call{value: denomination}(\\\"\\\");\\n        if(!paymentOk){\\n            revert PaymentFailed();\\n        }\\n\\n        emit Withdrawal(msg.sender, nullifierHash);\\n    }\\n\\n    function levelDefaults(uint256 index) internal pure returns (uint256) {\\n        if (index > 9) {\\n            revert IndexOutOfBound(index);\\n        }\\n\\n        uint256[10] memory hashes = [\\n            11453634411542844787499634721323414931465088881580445903117236537484788828581,\\n            21759559294542366315284509249586907808062322870962667765282157872669179426305,\\n            2800814587524735286159569377379752927188029721286562875729267220991164399242,\\n            87253568801316884066334864872212400487325631090541227847966176534645555967330,\\n            16091454649916794623929336129931295998098934060451480326351876193731015714666,\\n            110276519996832799046081358197168128650129019969002202844137231385581283223032,\\n            24361892621379661372463289462581121875681948013554894918820988553066750189444,\\n            3803846826699328777041246343939067304378981667725046445242884711909804349800,\\n            1246292310160105430640667147666993977742994472446958122107028133142438347983,\\n            60783858348513431507842163713811445103610436806650599349647377026990568035512\\n        ];\\n\\n        return hashes[index];\\n    }\\n\\n    function executeFlashLoanSimple(\\n            address payable receiverAddress,\\n            uint256 amount\\n        ) external {\\n    \\n            IFlashLoanReceiver receiver = IFlashLoanReceiver(receiverAddress);\\n            uint256 fee =  loanPercent;\\n            IWETH9(weth).deposit{value: amount}();\\n            IWETH9(weth).transfer(receiverAddress, amount);\\n    \\n            // require(\\n            receiver.executeOperation(\\n                amount,\\n                fee,\\n                msg.sender\\n            );\\n            // \\\"INVALID_FLASHLOAN_EXECUTOR_RETURN\\\"\\n            // ); \\n\\n            uint256 amountPlusPremium = amount + fee;\\n    \\n            IWETH9(weth).transferFrom(\\n                receiverAddress,\\n                address(this),\\n                amountPlusPremium\\n            );\\n            \\n            IWETH9(weth).withdraw(amountPlusPremium);\\n            // (bool ok, ) = relayer.call{value: fee}(\\\"\\\");\\n            // require(ok, \\\"Something went wrong\\\");\\n            \\n            emit FlashLoanEvent(\\n                receiverAddress,\\n                msg.sender,\\n                amount,\\n                fee\\n            );\\n        }\\n\\n        receive() external payable {}\\n}\",\"keccak256\":\"0xb9186336ca692df43f00ebe1851d901d5bb1ae78faf1421ba95fc8be39678b44\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100ab5760003560e01c8063b8e7956411610064578063b8e79564146101ce578063c78784d7146101f9578063cc98136e14610222578063d21e82ab1461024b578063d540004714610288578063ed33639f146102c5576100b2565b80630be4f422146100b757806312ad7381146100e25780632b7ac3f31461011f57806349ce89971461014a5780638bca6d1614610187578063b6b55f25146101b2576100b2565b366100b257005b600080fd5b3480156100c357600080fd5b506100cc6102f0565b6040516100d991906111ee565b60405180910390f35b3480156100ee57600080fd5b5061010960048036038101906101049190611244565b6102f6565b604051610116919061128c565b60405180910390f35b34801561012b57600080fd5b50610134610316565b60405161014191906112e8565b60405180910390f35b34801561015657600080fd5b50610171600480360381019061016c9190611244565b61033c565b60405161017e919061128c565b60405180910390f35b34801561019357600080fd5b5061019c61035c565b6040516101a991906111ee565b60405180910390f35b6101cc60048036038101906101c79190611244565b610362565b005b3480156101da57600080fd5b506101e36107fc565b6040516101f0919061131f565b60405180910390f35b34801561020557600080fd5b50610220600480360381019061021b9190611532565b61080f565b005b34801561022e57600080fd5b50610249600480360381019061024491906115d9565b610ba5565b005b34801561025757600080fd5b50610272600480360381019061026d9190611244565b610eef565b60405161027f919061128c565b60405180910390f35b34801561029457600080fd5b506102af60048036038101906102aa9190611645565b610f0f565b6040516102bc91906111ee565b60405180910390f35b3480156102d157600080fd5b506102da610f27565b6040516102e791906116d1565b60405180910390f35b60045481565b60086020528060005260406000206000915054906101000a900460ff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b6020528060005260406000206000915054906101000a900460ff1681565b60035481565b61036a610f4d565b60035434146103b057346040517f172624de0000000000000000000000000000000000000000000000000000000081526004016103a791906111ee565b60405180910390fd5b600b600082815260200190815260200160002060009054906101000a900460ff161561041357806040517f758b553900000000000000000000000000000000000000000000000000000000815260040161040a91906111ee565b60405180910390fd5b6001600260149054906101000a900460ff166002610431919061184e565b61043b9190611899565b6004541115610476576040517fef5ccf6600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061048061118f565b6104886111b2565b6000600454905060008590506000806000600267ffffffffffffffff8111156104b4576104b3611350565b5b6040519080825280602002602001820160405280156104e25781602001602082028036833780820191505090505b50905060005b600260149054906101000a900460ff1660ff168160ff16101561073c578460096000600260149054906101000a900460ff1660ff1660ff16815260200190815260200160002081905550600060028761054191906118fc565b036105b0578492506105558160ff16610f93565b93506105638160ff16610f93565b888260ff16600a81106105795761057861192d565b5b6020020181815250506000878260ff16600a811061059a5761059961192d565b5b602002019060ff16908160ff1681525050610632565b600960008260ff1660ff168152602001908152602001600020549250849350600960008260ff1660ff16815260200190815260200160002054888260ff16600a81106105ff576105fe61192d565b5b6020020181815250506001878260ff16600a81106106205761061f61192d565b5b602002019060ff16908160ff16815250505b82826000815181106106475761064661192d565b5b60200260200101818152505083826001815181106106685761066761192d565b5b6020026020010181815250506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632357940f848d6040518363ffffffff1660e01b81526004016106d3929190611a1a565b602060405180830381865afa1580156106f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107149190611a5f565b90508095506002876107269190611a8c565b965050808061073490611abd565b9150506104e8565b508397506001600860008a815260200190815260200160002060006101000a81548160ff02191690831515021790555060046000815461077b90611ae6565b919050819055506001600b60008b815260200190815260200160002060006101000a81548160ff0219169083151502179055507fe6ab8667cb740d6c65a4ad321c031eb42f6c5085d5753238d1b2e1e370c134838888886040516107e193929190611c5d565b60405180910390a150505050505050506107f9611185565b50565b600260149054906101000a900460ff1681565b610817610f4d565b60008160006002811061082d5761082c61192d565b5b6020020151905060008260016002811061084a5761084961192d565b5b602002015190506008600083815260200190815260200160002060009054906101000a900460ff166108a8576040517f504570e300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600a600082815260200190815260200160002060009054906101000a900460ff1615610900576040517fcad2ae0200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1687878760405180606001604052808881526020018781526020013373ffffffffffffffffffffffffffffffffffffffff168152506040516024016109829493929190611e9c565b6040516020818303038152906040527f11479fea000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610a0c9190611f54565b6000604051808303816000865af19150503d8060008114610a49576040519150601f19603f3d011682016040523d82523d6000602084013e610a4e565b606091505b5050905080610a89576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600a600084815260200190815260200160002060006101000a81548160ff02191690831515021790555060003373ffffffffffffffffffffffffffffffffffffffff16600354604051610add90611f91565b60006040518083038185875af1925050503d8060008114610b1a576040519150601f19603f3d011682016040523d82523d6000602084013e610b1f565b606091505b5050905080610b5a576040517ff499da2000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b653384604051610b8b929190611fa6565b60405180910390a150505050610b9f611185565b50505050565b600082905060006005549050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0846040518263ffffffff1660e01b81526004016000604051808303818588803b158015610c1b57600080fd5b505af1158015610c2f573d6000803e3d6000fd5b5050505050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856040518363ffffffff1660e01b8152600401610c91929190611ff0565b6020604051808303816000875af1158015610cb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd49190612045565b508173ffffffffffffffffffffffffffffffffffffffff1663d694ca768483336040518463ffffffff1660e01b8152600401610d1293929190612072565b6020604051808303816000875af1158015610d31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d559190612045565b5060008184610d6491906120a9565b9050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8630846040518463ffffffff1660e01b8152600401610dc5939291906120dd565b6020604051808303816000875af1158015610de4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e089190612045565b50600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b8152600401610e6491906111ee565b600060405180830381600087803b158015610e7e57600080fd5b505af1158015610e92573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff167fd9dbfec6e007ef75e4fe09acaaa24198647ca8101b9a659f7668e85e0ff7cc58338685604051610ee093929190612114565b60405180910390a25050505050565b600a6020528060005260406000206000915054906101000a900460ff1681565b60096020528060005260406000206000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260005403610f89576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600081905550565b60006009821115610fdb57816040517f696ae7e4000000000000000000000000000000000000000000000000000000008152600401610fd291906111ee565b60405180910390fd5b60006040518061014001604052807f1952870011f8830de55c2491b3afa717413f52441bf1fcd3136fb7db58fb09a581526020017f301b795fb7344f3bf046234240a5b66b895524cbcf47cf4be534e117a176b60181526020017f06313472f32745f4a521938f01c60cc112d03546cb00a6014607c4d1d985be8a81526020017fc0e7c514ac37d3720b1811f4ba3af0175987a80987688a44422d8724e8a1b56281526020017f239370c99c1b403ec0799e0e65a43bf2af3172b3a9a27ec4fe877137f579a76a81526020017ff3ce4c667c8f9d139ec60c5ed39d42d9cd3b641c57005657baea83e9788ca5f881526020017f35dc57b3893c812248537f75b0d7754dc4d61e5608c15d970f21736add549f8481526020017f0868e6a8756aba8fbffbab4d2d495b88473b0beeeb86fe14a5d2c70a571a196881526020017f02c1605f06250f45141948a5224dc808254a48270efadeae1be45b4b668004cf81526020017f866271d47cfa03017c5985181022d999d84730e0e8648a5ad9805bafb866d4b881525090508083600a81106111785761117761192d565b5b6020020151915050919050565b6001600081905550565b604051806101400160405280600a90602082028036833780820191505090505090565b604051806101400160405280600a90602082028036833780820191505090505090565b6000819050919050565b6111e8816111d5565b82525050565b600060208201905061120360008301846111df565b92915050565b6000604051905090565b600080fd5b611221816111d5565b811461122c57600080fd5b50565b60008135905061123e81611218565b92915050565b60006020828403121561125a57611259611213565b5b60006112688482850161122f565b91505092915050565b60008115159050919050565b61128681611271565b82525050565b60006020820190506112a1600083018461127d565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006112d2826112a7565b9050919050565b6112e2816112c7565b82525050565b60006020820190506112fd60008301846112d9565b92915050565b600060ff82169050919050565b61131981611303565b82525050565b60006020820190506113346000830184611310565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6113888261133f565b810181811067ffffffffffffffff821117156113a7576113a6611350565b5b80604052505050565b60006113ba611209565b90506113c6828261137f565b919050565b600067ffffffffffffffff8211156113e6576113e5611350565b5b602082029050919050565b600080fd5b6000611409611404846113cb565b6113b0565b90508060208402830185811115611423576114226113f1565b5b835b8181101561144c5780611438888261122f565b845260208401935050602081019050611425565b5050509392505050565b600082601f83011261146b5761146a61133a565b5b60026114788482856113f6565b91505092915050565b600067ffffffffffffffff82111561149c5761149b611350565b5b602082029050919050565b60006114ba6114b584611481565b6113b0565b905080604084028301858111156114d4576114d36113f1565b5b835b818110156114fd57806114e98882611456565b8452602084019350506040810190506114d6565b5050509392505050565b600082601f83011261151c5761151b61133a565b5b60026115298482856114a7565b91505092915050565b600080600080610140858703121561154d5761154c611213565b5b600061155b87828801611456565b945050604061156c87828801611507565b93505060c061157d87828801611456565b92505061010061158f87828801611456565b91505092959194509250565b60006115a6826112a7565b9050919050565b6115b68161159b565b81146115c157600080fd5b50565b6000813590506115d3816115ad565b92915050565b600080604083850312156115f0576115ef611213565b5b60006115fe858286016115c4565b925050602061160f8582860161122f565b9150509250929050565b61162281611303565b811461162d57600080fd5b50565b60008135905061163f81611619565b92915050565b60006020828403121561165b5761165a611213565b5b600061166984828501611630565b91505092915050565b6000819050919050565b600061169761169261168d846112a7565b611672565b6112a7565b9050919050565b60006116a98261167c565b9050919050565b60006116bb8261169e565b9050919050565b6116cb816116b0565b82525050565b60006020820190506116e660008301846116c2565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b60018511156117725780860481111561174e5761174d6116ec565b5b600185161561175d5780820291505b808102905061176b8561171b565b9450611732565b94509492505050565b60008261178b5760019050611847565b816117995760009050611847565b81600181146117af57600281146117b9576117e8565b6001915050611847565b60ff8411156117cb576117ca6116ec565b5b8360020a9150848211156117e2576117e16116ec565b5b50611847565b5060208310610133831016604e8410600b841016171561181d5782820a905083811115611818576118176116ec565b5b611847565b61182a8484846001611728565b92509050818404811115611841576118406116ec565b5b81810290505b9392505050565b6000611859826111d5565b915061186483611303565b92506118917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461177b565b905092915050565b60006118a4826111d5565b91506118af836111d5565b92508282039050818111156118c7576118c66116ec565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611907826111d5565b9150611912836111d5565b925082611922576119216118cd565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611991816111d5565b82525050565b60006119a38383611988565b60208301905092915050565b6000602082019050919050565b60006119c78261195c565b6119d18185611967565b93506119dc83611978565b8060005b83811015611a0d5781516119f48882611997565b97506119ff836119af565b9250506001810190506119e0565b5085935050505092915050565b60006040820190508181036000830152611a3481856119bc565b9050611a4360208301846111df565b9392505050565b600081519050611a5981611218565b92915050565b600060208284031215611a7557611a74611213565b5b6000611a8384828501611a4a565b91505092915050565b6000611a97826111d5565b9150611aa2836111d5565b925082611ab257611ab16118cd565b5b828204905092915050565b6000611ac882611303565b915060ff8203611adb57611ada6116ec565b5b600182019050919050565b6000611af1826111d5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611b2357611b226116ec565b5b600182019050919050565b6000600a9050919050565b600081905092915050565b6000819050919050565b6000602082019050919050565b611b6481611b2e565b611b6e8184611b39565b9250611b7982611b44565b8060005b83811015611baa578151611b918782611997565b9650611b9c83611b4e565b925050600181019050611b7d565b505050505050565b6000600a9050919050565b600081905092915050565b6000819050919050565b611bdb81611303565b82525050565b6000611bed8383611bd2565b60208301905092915050565b6000602082019050919050565b611c0f81611bb2565b611c198184611bbd565b9250611c2482611bc8565b8060005b83811015611c55578151611c3c8782611be1565b9650611c4783611bf9565b925050600181019050611c28565b505050505050565b60006102a082019050611c7360008301866111df565b611c806020830185611b5b565b611c8e610160830184611c06565b949350505050565b600060029050919050565b600081905092915050565b6000819050919050565b6000602082019050919050565b611ccc81611c96565b611cd68184611ca1565b9250611ce182611cac565b8060005b83811015611d12578151611cf98782611997565b9650611d0483611cb6565b925050600181019050611ce5565b505050505050565b600060029050919050565b600081905092915050565b6000819050919050565b600081905092915050565b611d4e81611c96565b611d588184611d3a565b9250611d6382611cac565b8060005b83811015611d94578151611d7b8782611997565b9650611d8683611cb6565b925050600181019050611d67565b505050505050565b6000611da88383611d45565b60408301905092915050565b6000602082019050919050565b611dca81611d1a565b611dd48184611d25565b9250611ddf82611d30565b8060005b83811015611e10578151611df78782611d9c565b9650611e0283611db4565b925050600181019050611de3565b505050505050565b600060039050919050565b600081905092915050565b6000819050919050565b6000602082019050919050565b611e4e81611e18565b611e588184611e23565b9250611e6382611e2e565b8060005b83811015611e94578151611e7b8782611997565b9650611e8683611e38565b925050600181019050611e67565b505050505050565b600061016082019050611eb26000830187611cc3565b611ebf6040830186611dc1565b611ecc60c0830185611cc3565b611eda610100830184611e45565b95945050505050565b600081519050919050565b600081905092915050565b60005b83811015611f17578082015181840152602081019050611efc565b60008484015250505050565b6000611f2e82611ee3565b611f388185611eee565b9350611f48818560208601611ef9565b80840191505092915050565b6000611f608284611f23565b915081905092915050565b50565b6000611f7b600083611eee565b9150611f8682611f6b565b600082019050919050565b6000611f9c82611f6e565b9150819050919050565b6000604082019050611fbb60008301856112d9565b611fc860208301846111df565b9392505050565b6000611fda8261169e565b9050919050565b611fea81611fcf565b82525050565b60006040820190506120056000830185611fe1565b61201260208301846111df565b9392505050565b61202281611271565b811461202d57600080fd5b50565b60008151905061203f81612019565b92915050565b60006020828403121561205b5761205a611213565b5b600061206984828501612030565b91505092915050565b600060608201905061208760008301866111df565b61209460208301856111df565b6120a160408301846112d9565b949350505050565b60006120b4826111d5565b91506120bf836111d5565b92508282019050808211156120d7576120d66116ec565b5b92915050565b60006060820190506120f26000830186611fe1565b6120ff60208301856112d9565b61210c60408301846111df565b949350505050565b600060608201905061212960008301866112d9565b61213660208301856111df565b61214360408301846111df565b94935050505056fea264697066735822122079a8d0e735d52324a81aaa3f07c76d2d5b988608b64c43456e264da94b9f92c264736f6c63430008140033",
  "devdoc": {
    "errors": {
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "src/Tornado.sol:Tornado",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 429,
        "contract": "src/Tornado.sol:Tornado",
        "label": "hasher",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(Hasher)259"
      },
      {
        "astId": 431,
        "contract": "src/Tornado.sol:Tornado",
        "label": "verifier",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 434,
        "contract": "src/Tornado.sol:Tornado",
        "label": "treeLevel",
        "offset": 20,
        "slot": "2",
        "type": "t_uint8"
      },
      {
        "astId": 437,
        "contract": "src/Tornado.sol:Tornado",
        "label": "denomination",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 439,
        "contract": "src/Tornado.sol:Tornado",
        "label": "nextLeafIndex",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 441,
        "contract": "src/Tornado.sol:Tornado",
        "label": "loanPercent",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 443,
        "contract": "src/Tornado.sol:Tornado",
        "label": "relayer",
        "offset": 0,
        "slot": "6",
        "type": "t_address_payable"
      },
      {
        "astId": 445,
        "contract": "src/Tornado.sol:Tornado",
        "label": "weth",
        "offset": 0,
        "slot": "7",
        "type": "t_address_payable"
      },
      {
        "astId": 455,
        "contract": "src/Tornado.sol:Tornado",
        "label": "knownRoots",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 459,
        "contract": "src/Tornado.sol:Tornado",
        "label": "lastLevelHash",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint8,t_uint256)"
      },
      {
        "astId": 463,
        "contract": "src/Tornado.sol:Tornado",
        "label": "nullifiers",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 467,
        "contract": "src/Tornado.sol:Tornado",
        "label": "commitments",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Hasher)259": {
        "encoding": "inplace",
        "label": "contract Hasher",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint8,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}