{
  "address": "0xD355c45b989287Cee25f915b3fd9373CDdC8cf24",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_hasher",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "commitment",
          "type": "uint256"
        }
      ],
      "name": "CommitmentAlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "IndexOutOfBound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidProof",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRoot",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MerkleTreeFull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NullifierAlreadyUsed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PaymentFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WrongAmountDeposited",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "root",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[10]",
          "name": "hashPairings",
          "type": "uint256[10]"
        },
        {
          "indexed": false,
          "internalType": "uint8[10]",
          "name": "pairDirections",
          "type": "uint8[10]"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nullifierHash",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "commitment",
          "type": "uint256"
        }
      ],
      "name": "commitments",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isRegistered",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "denomination",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_commitment",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasher",
      "outputs": [
        {
          "internalType": "contract Hasher",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "root",
          "type": "uint256"
        }
      ],
      "name": "knownRoots",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isKnown",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "level",
          "type": "uint8"
        }
      ],
      "name": "lastLevelHash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "levelHash",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextLeafIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nullifier",
          "type": "uint256"
        }
      ],
      "name": "nullifiers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "hasBeenUsed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treeLevel",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifier",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "a",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "b",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "c",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "input",
          "type": "uint256[2]"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbdadc41e523d967e33ccf7f38bf2b1a8d4f5ead63903f15a8bba505d438b557b",
  "receipt": {
    "to": null,
    "from": "0x1B150538E943F00127929f7eeB65754f7beB0B6d",
    "contractAddress": "0xD355c45b989287Cee25f915b3fd9373CDdC8cf24",
    "transactionIndex": 3,
    "gasUsed": "1691861",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000020000000000000002000000000000000000000000008000000000000000000000000000000000000000000000000000040000800000000000000000000100000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000080000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000004000008000000000000001000000000000000000000000000000100000000000000000000000000080000000000000000000000000000000000000000000100000",
    "blockHash": "0x56feca6e51311d4eea0caa81fbdec3b17dcec9738e63da2acda290113360eb44",
    "transactionHash": "0xbdadc41e523d967e33ccf7f38bf2b1a8d4f5ead63903f15a8bba505d438b557b",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 43382812,
        "transactionHash": "0xbdadc41e523d967e33ccf7f38bf2b1a8d4f5ead63903f15a8bba505d438b557b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000001b150538e943f00127929f7eeb65754f7beb0b6d",
          "0x0000000000000000000000005082f249cdb2f2c1ee035e4f423c46ea2dab3ab1"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000f04f6c1da886e0000000000000000000000000000000000000000000000016f446f41e551e61f000000000000000000000000000000000000000000000439c3eb1d2ed00b16360000000000000000000000000000000000000000000000016f356a4b23775db1000000000000000000000000000000000000000000000439c3fa222591e59ea4",
        "logIndex": 7,
        "blockHash": "0x56feca6e51311d4eea0caa81fbdec3b17dcec9738e63da2acda290113360eb44"
      }
    ],
    "blockNumber": 43382812,
    "cumulativeGasUsed": "1915299",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xcEc3e6a380ef047517643114708a27D4806E1179",
    "0xa4513C7058f1b2107e1DFf2e8E9E0fD055087DEf"
  ],
  "numDeployments": 1,
  "solcInputHash": "485805c8f8e3c15cee98934e87256545",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hasher\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"commitment\",\"type\":\"uint256\"}],\"name\":\"CommitmentAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"IndexOutOfBound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRoot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MerkleTreeFull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullifierAlreadyUsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PaymentFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WrongAmountDeposited\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[10]\",\"name\":\"hashPairings\",\"type\":\"uint256[10]\"},{\"indexed\":false,\"internalType\":\"uint8[10]\",\"name\":\"pairDirections\",\"type\":\"uint8[10]\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nullifierHash\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"commitment\",\"type\":\"uint256\"}],\"name\":\"commitments\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denomination\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_commitment\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasher\",\"outputs\":[{\"internalType\":\"contract Hasher\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"}],\"name\":\"knownRoots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isKnown\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"lastLevelHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"levelHash\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextLeafIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nullifier\",\"type\":\"uint256\"}],\"name\":\"nullifiers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasBeenUsed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treeLevel\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"input\",\"type\":\"uint256[2]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Tornado.sol\":\"Tornado\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"src/Hasher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ncontract Hasher {\\n    uint256 p = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    uint256[20] c = [\\n        0,\\n        105459342437457812771135172323083229699880076558714389201963426671496941082218,\\n        44701464856968139370917285707027820936722631087422041426223071261295627070036,\\n        41130458804021533314412899450586326522500270054983374850973845129658305660915,\\n        28034035305707963547093327110582394283920526326883215327933669381957202488237,\\n        67835101927061504797267889999629546147998413041540252422300881129244644115080,\\n        77038500041308678193056750316134029091500078767515237185085918316009128923853,\\n        104544454093982446733027218848029782092179398179105058587091749747719757285036,\\n        22185654124844698314055180464281947193548886457852406483524286412315521924078,\\n        11843198404908081669891232877866372505664551940087258443425983951700839758573,\\n        75730223139679823188252090137101366517592105358927914928435294176125136703785,\\n        63037111269339665253951994986804650300724512054442194752074821492998493619346,\\n        100222574878814648498017222491060355999208577101797160841662251588925373209270,\\n        16506531590690913941192929825193131037149846497963759319950973398493215082721,\\n        25870657958016487342382077423324595640085963189536902617468804520968505489214,\\n        3776681458614062867704305576886405923644290248776498775782616919101874199765,\\n        28467337724409730306364372414422354542968529509867349778522341896421740722671,\\n        66613445942499043245107522483384164860482134785917043209657158812816523619396,\\n        8730377214678666664395213446285196951160996012879518134438322009847352589864,\\n        71182301344205212203724160442778867079219260050250374209369439265688715521804\\n    ];\\n\\n    function MiMC5Feisel(uint256 iL, uint256 iR, uint256 k) public view returns (uint256, uint256) {\\n        uint256 nRounds = 20;\\n\\n        uint256 lastL;\\n        uint256 lastR;\\n\\n        lastL = iL;\\n        lastR = iR;\\n\\n        uint256 base;\\n        uint256 base2;\\n        uint256 base4;\\n        uint256 temp;\\n\\n        for (uint256 i; i < nRounds; i++) {\\n            base = addmod(addmod(lastR, k, p), c[i], p);\\n            base2 = mulmod(base, base, p);\\n            base4 = mulmod(base2, base2, p);\\n            temp = lastR;\\n            lastR = addmod(lastL, mulmod(base, base4, p), p);\\n            lastL = temp;\\n        }\\n\\n        return (lastL, lastR);\\n    }\\n\\n    function MiMC5Sponge(uint256[] memory elements, uint256 k) public view returns (uint256) {\\n        uint256 lastR;\\n        uint256 lastC;\\n\\n        uint256 length = elements.length;\\n        for (uint256 i; i < length; i++) {\\n            (lastR, lastC) = MiMC5Feisel(addmod(lastR, elements[i], p), lastC, k);\\n        }\\n\\n        return lastR;\\n    }\\n}\\n\",\"keccak256\":\"0x198d668f875aee6db1ffc6b691a6e0aedb4f0993bb8aaeea2782655091e53174\",\"license\":\"MIT\"},\"src/Tornado.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {Hasher} from \\\"./Hasher.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\ninterface IVerifier {\\n    function verifyProof(\\n        uint256[2] calldata _pA,\\n        uint256[2][2] calldata _pB,\\n        uint256[2] calldata _pC,\\n        uint256[3] calldata _pubSignals\\n    ) external;\\n}\\n\\ncontract Tornado is ReentrancyGuard {\\n    error WrongAmountDeposited(uint256 amount);\\n    error CommitmentAlreadyRegistered(uint256 commitment);\\n    error MerkleTreeFull();\\n    error IndexOutOfBound(uint256 index);\\n    error InvalidRoot();\\n    error NullifierAlreadyUsed();\\n    error InvalidProof();\\n    error PaymentFailed();\\n\\n    event Deposit(uint256 root, uint256[10] hashPairings, uint8[10] pairDirections);\\n    event Withdrawal(address to, uint256 nullifierHash);\\n\\n    Hasher public hasher;\\n    address public verifier;\\n\\n    uint8 public treeLevel = 10;\\n    uint256 public denomination = 0.1 ether;\\n    uint256 public nextLeafIndex;\\n\\n    mapping(uint256 root => bool isKnown) public knownRoots;\\n    mapping(uint8 level => uint256 levelHash) public lastLevelHash;\\n    mapping(uint256 nullifier => bool hasBeenUsed) public nullifiers;\\n    mapping(uint256 commitment => bool isRegistered) public commitments;\\n\\n    constructor(address _hasher, address _verifier) {\\n        hasher = Hasher(_hasher);\\n        verifier = _verifier;\\n    }\\n\\n    function deposit(uint256 _commitment) external payable nonReentrant {\\n        if (msg.value != denomination) {\\n            revert WrongAmountDeposited(msg.value);\\n        }\\n        if (commitments[_commitment]) {\\n            revert CommitmentAlreadyRegistered(_commitment);\\n        }\\n        if (nextLeafIndex > 2 ** treeLevel - 1) {\\n            revert MerkleTreeFull();\\n        }\\n\\n        uint256 newRoot;\\n        uint256[10] memory hashPairings;\\n        uint8[10] memory hashDirections; // 0 means left, 1 means right\\n\\n        uint256 currentIndex = nextLeafIndex;\\n        uint256 currentHash = _commitment;\\n\\n        uint256 right;\\n        uint256 left;\\n        uint256[] memory MiMC5SpongeInputs = new uint256[](2);\\n\\n        for (uint8 i; i < treeLevel; i++) {\\n            lastLevelHash[treeLevel] = currentHash;\\n\\n            if (currentIndex % 2 == 0) {\\n                left = currentHash;\\n                right = levelDefaults(i);\\n                hashPairings[i] = levelDefaults(i);\\n                hashDirections[i] = 0;\\n            } else {\\n                left = lastLevelHash[i];\\n                right = currentHash;\\n                hashPairings[i] = lastLevelHash[i];\\n                hashDirections[i] = 1;\\n            }\\n\\n            MiMC5SpongeInputs[0] = left;\\n            MiMC5SpongeInputs[1] = right;\\n\\n            (uint256 hashResult) = hasher.MiMC5Sponge(MiMC5SpongeInputs, _commitment);\\n\\n            currentHash = hashResult;\\n            currentIndex /= 2;\\n        }\\n\\n        newRoot = currentHash;\\n        knownRoots[newRoot] = true;\\n        ++nextLeafIndex;\\n        commitments[_commitment] = true;\\n\\n        emit Deposit(newRoot, hashPairings, hashDirections);\\n    }\\n\\n    function withdraw(uint256[2] memory a, uint256[2][2] memory b, uint256[2] memory c, uint256[2] memory input)\\n        external\\n        nonReentrant\\n    {\\n        uint256 root = input[0];\\n        uint256 nullifierHash = input[1];\\n\\n        if (!knownRoots[root]) {\\n            revert InvalidRoot();\\n        }\\n        if (nullifiers[nullifierHash]) {\\n            revert NullifierAlreadyUsed();\\n        }\\n        (bool success,) = verifier.call(\\n            abi.encodeWithSignature(\\n                \\\"verifyProof(uint256[2],uint256[2][2],uint256[2],uint256[3])\\\",\\n                a,\\n                b,\\n                c,\\n                [root, nullifierHash, uint256(uint160(msg.sender))]\\n            )\\n        );\\n        if(!success){\\n            revert InvalidProof();\\n        }\\n        nullifiers[nullifierHash] = true;\\n        (bool paymentOk, ) = msg.sender.call{value: denomination}(\\\"\\\");\\n        if(!paymentOk){\\n            revert PaymentFailed();\\n        }\\n\\n        emit Withdrawal(msg.sender, nullifierHash);\\n    }\\n\\n    function levelDefaults(uint256 index) internal pure returns (uint256) {\\n        if (index > 9) {\\n            revert IndexOutOfBound(index);\\n        }\\n\\n        uint256[10] memory hashes = [\\n            11453634411542844787499634721323414931465088881580445903117236537484788828581,\\n            21759559294542366315284509249586907808062322870962667765282157872669179426305,\\n            2800814587524735286159569377379752927188029721286562875729267220991164399242,\\n            87253568801316884066334864872212400487325631090541227847966176534645555967330,\\n            16091454649916794623929336129931295998098934060451480326351876193731015714666,\\n            110276519996832799046081358197168128650129019969002202844137231385581283223032,\\n            24361892621379661372463289462581121875681948013554894918820988553066750189444,\\n            3803846826699328777041246343939067304378981667725046445242884711909804349800,\\n            1246292310160105430640667147666993977742994472446958122107028133142438347983,\\n            60783858348513431507842163713811445103610436806650599349647377026990568035512\\n        ];\\n\\n        return hashes[index];\\n    }\\n}\\n\",\"keccak256\":\"0x944a259084b0a9f47320309e8f0e65e474c9d37f1eda7539be55455811b7d1d4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061009c5760003560e01c8063b6b55f2511610064578063b6b55f251461019c578063b8e79564146101b8578063c78784d7146101e3578063d21e82ab1461020c578063d540004714610249578063ed33639f146102865761009c565b80630be4f422146100a157806312ad7381146100cc5780632b7ac3f31461010957806349ce8997146101345780638bca6d1614610171575b600080fd5b3480156100ad57600080fd5b506100b66102b1565b6040516100c39190610e65565b60405180910390f35b3480156100d857600080fd5b506100f360048036038101906100ee9190610ebb565b6102b7565b6040516101009190610f03565b60405180910390f35b34801561011557600080fd5b5061011e6102d7565b60405161012b9190610f5f565b60405180910390f35b34801561014057600080fd5b5061015b60048036038101906101569190610ebb565b6102fd565b6040516101689190610f03565b60405180910390f35b34801561017d57600080fd5b5061018661031d565b6040516101939190610e65565b60405180910390f35b6101b660048036038101906101b19190610ebb565b610323565b005b3480156101c457600080fd5b506101cd6107bd565b6040516101da9190610f96565b60405180910390f35b3480156101ef57600080fd5b5061020a600480360381019061020591906111a9565b6107d0565b005b34801561021857600080fd5b50610233600480360381019061022e9190610ebb565b610b66565b6040516102409190610f03565b60405180910390f35b34801561025557600080fd5b50610270600480360381019061026b919061123e565b610b86565b60405161027d9190610e65565b60405180910390f35b34801561029257600080fd5b5061029b610b9e565b6040516102a891906112ca565b60405180910390f35b60045481565b60056020528060005260406000206000915054906101000a900460ff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60086020528060005260406000206000915054906101000a900460ff1681565b60035481565b61032b610bc4565b600354341461037157346040517f172624de0000000000000000000000000000000000000000000000000000000081526004016103689190610e65565b60405180910390fd5b6008600082815260200190815260200160002060009054906101000a900460ff16156103d457806040517f758b55390000000000000000000000000000000000000000000000000000000081526004016103cb9190610e65565b60405180910390fd5b6001600260149054906101000a900460ff1660026103f29190611447565b6103fc9190611492565b6004541115610437576040517fef5ccf6600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610441610e06565b610449610e29565b6000600454905060008590506000806000600267ffffffffffffffff81111561047557610474610fc7565b5b6040519080825280602002602001820160405280156104a35781602001602082028036833780820191505090505b50905060005b600260149054906101000a900460ff1660ff168160ff1610156106fd578460066000600260149054906101000a900460ff1660ff1660ff16815260200190815260200160002081905550600060028761050291906114f5565b03610571578492506105168160ff16610c0a565b93506105248160ff16610c0a565b888260ff16600a811061053a57610539611526565b5b6020020181815250506000878260ff16600a811061055b5761055a611526565b5b602002019060ff16908160ff16815250506105f3565b600660008260ff1660ff168152602001908152602001600020549250849350600660008260ff1660ff16815260200190815260200160002054888260ff16600a81106105c0576105bf611526565b5b6020020181815250506001878260ff16600a81106105e1576105e0611526565b5b602002019060ff16908160ff16815250505b828260008151811061060857610607611526565b5b602002602001018181525050838260018151811061062957610628611526565b5b6020026020010181815250506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632357940f848d6040518363ffffffff1660e01b8152600401610694929190611613565b602060405180830381865afa1580156106b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d59190611658565b90508095506002876106e79190611685565b96505080806106f5906116b6565b9150506104a9565b508397506001600560008a815260200190815260200160002060006101000a81548160ff02191690831515021790555060046000815461073c906116df565b919050819055506001600860008b815260200190815260200160002060006101000a81548160ff0219169083151502179055507fe6ab8667cb740d6c65a4ad321c031eb42f6c5085d5753238d1b2e1e370c134838888886040516107a293929190611856565b60405180910390a150505050505050506107ba610dfc565b50565b600260149054906101000a900460ff1681565b6107d8610bc4565b6000816000600281106107ee576107ed611526565b5b6020020151905060008260016002811061080b5761080a611526565b5b602002015190506005600083815260200190815260200160002060009054906101000a900460ff16610869576040517f504570e300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6007600082815260200190815260200160002060009054906101000a900460ff16156108c1576040517fcad2ae0200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1687878760405180606001604052808881526020018781526020013373ffffffffffffffffffffffffffffffffffffffff168152506040516024016109439493929190611a95565b6040516020818303038152906040527f11479fea000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516109cd9190611b4d565b6000604051808303816000865af19150503d8060008114610a0a576040519150601f19603f3d011682016040523d82523d6000602084013e610a0f565b606091505b5050905080610a4a576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016007600084815260200190815260200160002060006101000a81548160ff02191690831515021790555060003373ffffffffffffffffffffffffffffffffffffffff16600354604051610a9e90611b8a565b60006040518083038185875af1925050503d8060008114610adb576040519150601f19603f3d011682016040523d82523d6000602084013e610ae0565b606091505b5050905080610b1b576040517ff499da2000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b653384604051610b4c929190611b9f565b60405180910390a150505050610b60610dfc565b50505050565b60076020528060005260406000206000915054906101000a900460ff1681565b60066020528060005260406000206000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260005403610c00576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600081905550565b60006009821115610c5257816040517f696ae7e4000000000000000000000000000000000000000000000000000000008152600401610c499190610e65565b60405180910390fd5b60006040518061014001604052807f1952870011f8830de55c2491b3afa717413f52441bf1fcd3136fb7db58fb09a581526020017f301b795fb7344f3bf046234240a5b66b895524cbcf47cf4be534e117a176b60181526020017f06313472f32745f4a521938f01c60cc112d03546cb00a6014607c4d1d985be8a81526020017fc0e7c514ac37d3720b1811f4ba3af0175987a80987688a44422d8724e8a1b56281526020017f239370c99c1b403ec0799e0e65a43bf2af3172b3a9a27ec4fe877137f579a76a81526020017ff3ce4c667c8f9d139ec60c5ed39d42d9cd3b641c57005657baea83e9788ca5f881526020017f35dc57b3893c812248537f75b0d7754dc4d61e5608c15d970f21736add549f8481526020017f0868e6a8756aba8fbffbab4d2d495b88473b0beeeb86fe14a5d2c70a571a196881526020017f02c1605f06250f45141948a5224dc808254a48270efadeae1be45b4b668004cf81526020017f866271d47cfa03017c5985181022d999d84730e0e8648a5ad9805bafb866d4b881525090508083600a8110610def57610dee611526565b5b6020020151915050919050565b6001600081905550565b604051806101400160405280600a90602082028036833780820191505090505090565b604051806101400160405280600a90602082028036833780820191505090505090565b6000819050919050565b610e5f81610e4c565b82525050565b6000602082019050610e7a6000830184610e56565b92915050565b6000604051905090565b600080fd5b610e9881610e4c565b8114610ea357600080fd5b50565b600081359050610eb581610e8f565b92915050565b600060208284031215610ed157610ed0610e8a565b5b6000610edf84828501610ea6565b91505092915050565b60008115159050919050565b610efd81610ee8565b82525050565b6000602082019050610f186000830184610ef4565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f4982610f1e565b9050919050565b610f5981610f3e565b82525050565b6000602082019050610f746000830184610f50565b92915050565b600060ff82169050919050565b610f9081610f7a565b82525050565b6000602082019050610fab6000830184610f87565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610fff82610fb6565b810181811067ffffffffffffffff8211171561101e5761101d610fc7565b5b80604052505050565b6000611031610e80565b905061103d8282610ff6565b919050565b600067ffffffffffffffff82111561105d5761105c610fc7565b5b602082029050919050565b600080fd5b600061108061107b84611042565b611027565b9050806020840283018581111561109a57611099611068565b5b835b818110156110c357806110af8882610ea6565b84526020840193505060208101905061109c565b5050509392505050565b600082601f8301126110e2576110e1610fb1565b5b60026110ef84828561106d565b91505092915050565b600067ffffffffffffffff82111561111357611112610fc7565b5b602082029050919050565b600061113161112c846110f8565b611027565b9050806040840283018581111561114b5761114a611068565b5b835b81811015611174578061116088826110cd565b84526020840193505060408101905061114d565b5050509392505050565b600082601f83011261119357611192610fb1565b5b60026111a084828561111e565b91505092915050565b60008060008061014085870312156111c4576111c3610e8a565b5b60006111d2878288016110cd565b94505060406111e38782880161117e565b93505060c06111f4878288016110cd565b925050610100611206878288016110cd565b91505092959194509250565b61121b81610f7a565b811461122657600080fd5b50565b60008135905061123881611212565b92915050565b60006020828403121561125457611253610e8a565b5b600061126284828501611229565b91505092915050565b6000819050919050565b600061129061128b61128684610f1e565b61126b565b610f1e565b9050919050565b60006112a282611275565b9050919050565b60006112b482611297565b9050919050565b6112c4816112a9565b82525050565b60006020820190506112df60008301846112bb565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b600185111561136b57808604811115611347576113466112e5565b5b60018516156113565780820291505b808102905061136485611314565b945061132b565b94509492505050565b6000826113845760019050611440565b816113925760009050611440565b81600181146113a857600281146113b2576113e1565b6001915050611440565b60ff8411156113c4576113c36112e5565b5b8360020a9150848211156113db576113da6112e5565b5b50611440565b5060208310610133831016604e8410600b84101617156114165782820a905083811115611411576114106112e5565b5b611440565b6114238484846001611321565b9250905081840481111561143a576114396112e5565b5b81810290505b9392505050565b600061145282610e4c565b915061145d83610f7a565b925061148a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484611374565b905092915050565b600061149d82610e4c565b91506114a883610e4c565b92508282039050818111156114c0576114bf6112e5565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061150082610e4c565b915061150b83610e4c565b92508261151b5761151a6114c6565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61158a81610e4c565b82525050565b600061159c8383611581565b60208301905092915050565b6000602082019050919050565b60006115c082611555565b6115ca8185611560565b93506115d583611571565b8060005b838110156116065781516115ed8882611590565b97506115f8836115a8565b9250506001810190506115d9565b5085935050505092915050565b6000604082019050818103600083015261162d81856115b5565b905061163c6020830184610e56565b9392505050565b60008151905061165281610e8f565b92915050565b60006020828403121561166e5761166d610e8a565b5b600061167c84828501611643565b91505092915050565b600061169082610e4c565b915061169b83610e4c565b9250826116ab576116aa6114c6565b5b828204905092915050565b60006116c182610f7a565b915060ff82036116d4576116d36112e5565b5b600182019050919050565b60006116ea82610e4c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361171c5761171b6112e5565b5b600182019050919050565b6000600a9050919050565b600081905092915050565b6000819050919050565b6000602082019050919050565b61175d81611727565b6117678184611732565b92506117728261173d565b8060005b838110156117a357815161178a8782611590565b965061179583611747565b925050600181019050611776565b505050505050565b6000600a9050919050565b600081905092915050565b6000819050919050565b6117d481610f7a565b82525050565b60006117e683836117cb565b60208301905092915050565b6000602082019050919050565b611808816117ab565b61181281846117b6565b925061181d826117c1565b8060005b8381101561184e57815161183587826117da565b9650611840836117f2565b925050600181019050611821565b505050505050565b60006102a08201905061186c6000830186610e56565b6118796020830185611754565b6118876101608301846117ff565b949350505050565b600060029050919050565b600081905092915050565b6000819050919050565b6000602082019050919050565b6118c58161188f565b6118cf818461189a565b92506118da826118a5565b8060005b8381101561190b5781516118f28782611590565b96506118fd836118af565b9250506001810190506118de565b505050505050565b600060029050919050565b600081905092915050565b6000819050919050565b600081905092915050565b6119478161188f565b6119518184611933565b925061195c826118a5565b8060005b8381101561198d5781516119748782611590565b965061197f836118af565b925050600181019050611960565b505050505050565b60006119a1838361193e565b60408301905092915050565b6000602082019050919050565b6119c381611913565b6119cd818461191e565b92506119d882611929565b8060005b83811015611a095781516119f08782611995565b96506119fb836119ad565b9250506001810190506119dc565b505050505050565b600060039050919050565b600081905092915050565b6000819050919050565b6000602082019050919050565b611a4781611a11565b611a518184611a1c565b9250611a5c82611a27565b8060005b83811015611a8d578151611a748782611590565b9650611a7f83611a31565b925050600181019050611a60565b505050505050565b600061016082019050611aab60008301876118bc565b611ab860408301866119ba565b611ac560c08301856118bc565b611ad3610100830184611a3e565b95945050505050565b600081519050919050565b600081905092915050565b60005b83811015611b10578082015181840152602081019050611af5565b60008484015250505050565b6000611b2782611adc565b611b318185611ae7565b9350611b41818560208601611af2565b80840191505092915050565b6000611b598284611b1c565b915081905092915050565b50565b6000611b74600083611ae7565b9150611b7f82611b64565b600082019050919050565b6000611b9582611b67565b9150819050919050565b6000604082019050611bb46000830185610f50565b611bc16020830184610e56565b939250505056fea2646970667358221220e5176d6481ea43745da49c88699254c1acfb229ea782c2a2340fb920a71ef68564736f6c63430008140033",
  "devdoc": {
    "errors": {
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "src/Tornado.sol:Tornado",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 332,
        "contract": "src/Tornado.sol:Tornado",
        "label": "hasher",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(Hasher)259"
      },
      {
        "astId": 334,
        "contract": "src/Tornado.sol:Tornado",
        "label": "verifier",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 337,
        "contract": "src/Tornado.sol:Tornado",
        "label": "treeLevel",
        "offset": 20,
        "slot": "2",
        "type": "t_uint8"
      },
      {
        "astId": 340,
        "contract": "src/Tornado.sol:Tornado",
        "label": "denomination",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 342,
        "contract": "src/Tornado.sol:Tornado",
        "label": "nextLeafIndex",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 346,
        "contract": "src/Tornado.sol:Tornado",
        "label": "knownRoots",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 350,
        "contract": "src/Tornado.sol:Tornado",
        "label": "lastLevelHash",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint8,t_uint256)"
      },
      {
        "astId": 354,
        "contract": "src/Tornado.sol:Tornado",
        "label": "nullifiers",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 358,
        "contract": "src/Tornado.sol:Tornado",
        "label": "commitments",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Hasher)259": {
        "encoding": "inplace",
        "label": "contract Hasher",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint8,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}