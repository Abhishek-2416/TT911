{
  "address": "0xad12ef5970Ade8929A8021b2982264815ddd90f7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_hasher",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_loanPercent",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_relayer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "commitment",
          "type": "uint256"
        }
      ],
      "name": "CommitmentAlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "IndexOutOfBound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidProof",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRoot",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MerkleTreeFull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NullifierAlreadyUsed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PaymentFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WrongAmountDeposited",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "root",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[10]",
          "name": "hashPairings",
          "type": "uint256[10]"
        },
        {
          "indexed": false,
          "internalType": "uint8[10]",
          "name": "pairDirections",
          "type": "uint8[10]"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "premium",
          "type": "uint256"
        }
      ],
      "name": "FlashLoanEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nullifierHash",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "commitment",
          "type": "uint256"
        }
      ],
      "name": "commitments",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isRegistered",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "denomination",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_commitment",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiverAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "executeFlashLoanSimple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasher",
      "outputs": [
        {
          "internalType": "contract Hasher",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "root",
          "type": "uint256"
        }
      ],
      "name": "knownRoots",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isKnown",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "level",
          "type": "uint8"
        }
      ],
      "name": "lastLevelHash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "levelHash",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextLeafIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nullifier",
          "type": "uint256"
        }
      ],
      "name": "nullifiers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "hasBeenUsed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treeLevel",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifier",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "a",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "b",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "c",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "input",
          "type": "uint256[2]"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa7bd1497a140dcbe2d75f785739290ef966ec8f3d6a9a3d13a0d6b1eac05cc80",
  "receipt": {
    "to": null,
    "from": "0x1B150538E943F00127929f7eeB65754f7beB0B6d",
    "contractAddress": "0xad12ef5970Ade8929A8021b2982264815ddd90f7",
    "transactionIndex": 10,
    "gasUsed": "2150995",
    "logsBloom": "0x
    "blockHash": "0x9bcbe127b0b4d33523dee6e0de8446cdf21c1316ab98c9833ee9ac6940ed6c60",
    "transactionHash": "0xa7bd1497a140dcbe2d75f785739290ef966ec8f3d6a9a3d13a0d6b1eac05cc80",
    "logs": [],
    "blockNumber": 4856274,
    "cumulativeGasUsed": "5652825",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe5c1534D000b5526771e1568708E0A9F8f71Ba6D",
    "0x0cb6873cb9ed6015ab18ef98c13534daccb9c53d",
    "0x7b79995e5f793A07Bc00c21412e50Ecae098E7f9",
    100,
    "0x6C55782683dA33FA742B71f89F0dF88fFcBD6F28"
  ],
  "numDeployments": 5,
  "solcInputHash": "f59123e6c369c44a08e34392d4067435",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hasher\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_loanPercent\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_relayer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"commitment\",\"type\":\"uint256\"}],\"name\":\"CommitmentAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"IndexOutOfBound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRoot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MerkleTreeFull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullifierAlreadyUsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PaymentFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WrongAmountDeposited\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[10]\",\"name\":\"hashPairings\",\"type\":\"uint256[10]\"},{\"indexed\":false,\"internalType\":\"uint8[10]\",\"name\":\"pairDirections\",\"type\":\"uint8[10]\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"}],\"name\":\"FlashLoanEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nullifierHash\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"commitment\",\"type\":\"uint256\"}],\"name\":\"commitments\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denomination\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_commitment\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"executeFlashLoanSimple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasher\",\"outputs\":[{\"internalType\":\"contract Hasher\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"}],\"name\":\"knownRoots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isKnown\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"lastLevelHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"levelHash\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextLeafIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nullifier\",\"type\":\"uint256\"}],\"name\":\"nullifiers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasBeenUsed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treeLevel\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"input\",\"type\":\"uint256[2]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Tornado.sol\":\"Tornado\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"src/Hasher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ncontract Hasher {\\n    uint256 p = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    uint256[20] c = [\\n        0,\\n        105459342437457812771135172323083229699880076558714389201963426671496941082218,\\n        44701464856968139370917285707027820936722631087422041426223071261295627070036,\\n        41130458804021533314412899450586326522500270054983374850973845129658305660915,\\n        28034035305707963547093327110582394283920526326883215327933669381957202488237,\\n        67835101927061504797267889999629546147998413041540252422300881129244644115080,\\n        77038500041308678193056750316134029091500078767515237185085918316009128923853,\\n        104544454093982446733027218848029782092179398179105058587091749747719757285036,\\n        22185654124844698314055180464281947193548886457852406483524286412315521924078,\\n        11843198404908081669891232877866372505664551940087258443425983951700839758573,\\n        75730223139679823188252090137101366517592105358927914928435294176125136703785,\\n        63037111269339665253951994986804650300724512054442194752074821492998493619346,\\n        100222574878814648498017222491060355999208577101797160841662251588925373209270,\\n        16506531590690913941192929825193131037149846497963759319950973398493215082721,\\n        25870657958016487342382077423324595640085963189536902617468804520968505489214,\\n        3776681458614062867704305576886405923644290248776498775782616919101874199765,\\n        28467337724409730306364372414422354542968529509867349778522341896421740722671,\\n        66613445942499043245107522483384164860482134785917043209657158812816523619396,\\n        8730377214678666664395213446285196951160996012879518134438322009847352589864,\\n        71182301344205212203724160442778867079219260050250374209369439265688715521804\\n    ];\\n\\n    function MiMC5Feisel(uint256 iL, uint256 iR, uint256 k) public view returns (uint256, uint256) {\\n        uint256 nRounds = 20;\\n\\n        uint256 lastL;\\n        uint256 lastR;\\n\\n        lastL = iL;\\n        lastR = iR;\\n\\n        uint256 base;\\n        uint256 base2;\\n        uint256 base4;\\n        uint256 temp;\\n\\n        for (uint256 i; i < nRounds; i++) {\\n            base = addmod(addmod(lastR, k, p), c[i], p);\\n            base2 = mulmod(base, base, p);\\n            base4 = mulmod(base2, base2, p);\\n            temp = lastR;\\n            lastR = addmod(lastL, mulmod(base, base4, p), p);\\n            lastL = temp;\\n        }\\n\\n        return (lastL, lastR);\\n    }\\n\\n    function MiMC5Sponge(uint256[] memory elements, uint256 k) public view returns (uint256) {\\n        uint256 lastR;\\n        uint256 lastC;\\n\\n        uint256 length = elements.length;\\n        for (uint256 i; i < length; i++) {\\n            (lastR, lastC) = MiMC5Feisel(addmod(lastR, elements[i], p), lastC, k);\\n        }\\n\\n        return lastR;\\n    }\\n}\\n\",\"keccak256\":\"0x198d668f875aee6db1ffc6b691a6e0aedb4f0993bb8aaeea2782655091e53174\",\"license\":\"MIT\"},\"src/IFlashLoanReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IFlashLoanSimpleReceiver\\n * @author Aave\\n * @notice Defines the basic interface of a flashloan-receiver contract.\\n * @dev Implement this interface to develop a flashloan-compatible flashLoanReceiver contract\\n */\\ninterface IFlashLoanReceiver {\\n  /**\\n   * @notice Executes an operation after receiving the flash-borrowed asset\\n   * @dev Ensure that the contract can return the debt + premium, e.g., has\\n   *      enough funds to repay and has approved the Pool to pull the total amount\\n   * @param amount The amount of the flash-borrowed asset\\n   * @param fee The fee of the flash-borrowed asset\\n   * @param initiator The address of the flashloan initiator\\n   * @return True if the execution of the operation succeeds, false otherwise\\n   */\\n  function executeOperation(\\n    uint256 amount,\\n    uint256 fee,\\n    address initiator\\n  ) external returns (bool);\\n\\n\\n}\",\"keccak256\":\"0x9c7a4699fea6c6109a3ca4bbfbcb381d1850c0ab3a7128f55dfb10857f788498\",\"license\":\"AGPL-3.0\"},\"src/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity >=0.4.0;\\n\\ninterface IWETH9 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function balanceOf(address) external view returns (uint);\\n\\n    function allowance(address, address) external view returns (uint);\\n\\n    receive() external payable;\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint wad) external;\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function approve(address guy, uint wad) external returns (bool);\\n\\n    function transfer(address dst, uint wad) external returns (bool);\\n\\n    function transferFrom(address src, address dst, uint wad)\\n    external\\n    returns (bool);\\n}\",\"keccak256\":\"0xe9e4c62ac7fd62cc96d6bc5a35216b40013c363dd000687f9742bca9762b111c\",\"license\":\"AGPL-3.0\"},\"src/Tornado.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {Hasher} from \\\"./Hasher.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./IWETH9.sol\\\";\\nimport \\\"./IFlashLoanReceiver.sol\\\";\\n\\n\\ninterface IVerifier {\\n    function verifyProof(\\n        uint256[2] calldata _pA,\\n        uint256[2][2] calldata _pB,\\n        uint256[2] calldata _pC,\\n        uint256[3] calldata _pubSignals\\n    ) external;\\n}\\n\\ncontract Tornado is ReentrancyGuard {\\n    error WrongAmountDeposited(uint256 amount);\\n    error CommitmentAlreadyRegistered(uint256 commitment);\\n    error MerkleTreeFull();\\n    error IndexOutOfBound(uint256 index);\\n    error InvalidRoot();\\n    error NullifierAlreadyUsed();\\n    error InvalidProof();\\n    error PaymentFailed();\\n\\n    event Deposit(uint256 root, uint256[10] hashPairings, uint8[10] pairDirections);\\n    event Withdrawal(address to, uint256 nullifierHash);\\n\\n    Hasher public hasher;\\n    address public verifier;\\n\\n    uint8 public treeLevel = 10;\\n    uint256 public denomination = 10**17;\\n    uint256 public nextLeafIndex;\\n    address payable weth;\\n    uint256 immutable loanPercent;\\n    uint256 internal constant PERCENTAGE_FACTOR = 1e4;\\n    uint256 feeCollected;\\n    address payable relayer;\\n\\n    // Half percentage factor (50.00%)\\n    uint256 internal constant HALF_PERCENTAGE_FACTOR = 0.5e4;\\n\\n    event FlashLoanEvent(\\n        address indexed target,\\n        address initiator,\\n        uint256 amount,\\n        uint256 premium\\n    );\\n\\n    mapping(uint256 root => bool isKnown) public knownRoots;\\n    mapping(uint8 level => uint256 levelHash) public lastLevelHash;\\n    mapping(uint256 nullifier => bool hasBeenUsed) public nullifiers;\\n    mapping(uint256 commitment => bool isRegistered) public commitments;\\n\\n    constructor(address _hasher, address _verifier,address payable _weth, uint256 _loanPercent, address payable _relayer){\\n        hasher = Hasher(_hasher);\\n        verifier = _verifier;\\n        weth = _weth;\\n        relayer = _relayer;\\n        loanPercent = _loanPercent;\\n    }\\n\\n    function deposit(uint256 _commitment) external payable nonReentrant {\\n        require(msg.value == 0, \\\"ETH value is supposed to be 0 for ERC20 instance\\\");\\n\\n        if (commitments[_commitment]) {\\n            revert CommitmentAlreadyRegistered(_commitment);\\n        }\\n        if (nextLeafIndex > 2 ** treeLevel - 1) {\\n            revert MerkleTreeFull();\\n        }\\n\\n        uint256 newRoot;\\n        uint256[10] memory hashPairings;\\n        uint8[10] memory hashDirections; // 0 means left, 1 means right\\n\\n        uint256 currentIndex = nextLeafIndex;\\n        uint256 currentHash = _commitment;\\n\\n        uint256 right;\\n        uint256 left;\\n        uint256[] memory MiMC5SpongeInputs = new uint256[](2);\\n\\n        for (uint8 i; i < treeLevel; i++) {\\n            lastLevelHash[treeLevel] = currentHash;\\n\\n            if (currentIndex % 2 == 0) {\\n                left = currentHash;\\n                right = levelDefaults(i);\\n                hashPairings[i] = levelDefaults(i);\\n                hashDirections[i] = 0;\\n            } else {\\n                left = lastLevelHash[i];\\n                right = currentHash;\\n                hashPairings[i] = lastLevelHash[i];\\n                hashDirections[i] = 1;\\n            }\\n\\n            MiMC5SpongeInputs[0] = left;\\n            MiMC5SpongeInputs[1] = right;\\n\\n            (uint256 hashResult) = hasher.MiMC5Sponge(MiMC5SpongeInputs, _commitment);\\n\\n            currentHash = hashResult;\\n            currentIndex /= 2;\\n        }\\n\\n        newRoot = currentHash;\\n        knownRoots[newRoot] = true;\\n        ++nextLeafIndex;\\n        commitments[_commitment] = true;\\n\\n        IWETH9(weth).transferFrom(msg.sender, address(this), denomination);\\n\\n        emit Deposit(newRoot, hashPairings, hashDirections);\\n    }\\n\\n    function withdraw(uint256[2] memory a, uint256[2][2] memory b, uint256[2] memory c, uint256[2] memory input)\\n        external\\n        nonReentrant\\n    {\\n        uint256 root = input[0];\\n        uint256 nullifierHash = input[1];\\n\\n        if (!knownRoots[root]) {\\n            revert InvalidRoot();\\n        }\\n        if (nullifiers[nullifierHash]) {\\n            revert NullifierAlreadyUsed();\\n        }\\n        (bool success,) = verifier.call(\\n            abi.encodeWithSignature(\\n                \\\"verifyProof(uint256[2],uint256[2][2],uint256[2],uint256[3])\\\",\\n                a,\\n                b,\\n                c,\\n                [root, nullifierHash, uint256(uint160(msg.sender))]\\n            )\\n        );\\n        if(!success){\\n            revert InvalidProof();\\n        }\\n        nullifiers[nullifierHash] = true;\\n        bool paymentOk = IWETH9(weth).transfer(msg.sender, denomination);\\n        if(!paymentOk){\\n            revert PaymentFailed();\\n        }\\n\\n        emit Withdrawal(msg.sender, nullifierHash);\\n    }\\n\\n    function levelDefaults(uint256 index) internal pure returns (uint256) {\\n        if (index > 9) {\\n            revert IndexOutOfBound(index);\\n        }\\n\\n        uint256[10] memory hashes = [\\n            11453634411542844787499634721323414931465088881580445903117236537484788828581,\\n            21759559294542366315284509249586907808062322870962667765282157872669179426305,\\n            2800814587524735286159569377379752927188029721286562875729267220991164399242,\\n            87253568801316884066334864872212400487325631090541227847966176534645555967330,\\n            16091454649916794623929336129931295998098934060451480326351876193731015714666,\\n            110276519996832799046081358197168128650129019969002202844137231385581283223032,\\n            24361892621379661372463289462581121875681948013554894918820988553066750189444,\\n            3803846826699328777041246343939067304378981667725046445242884711909804349800,\\n            1246292310160105430640667147666993977742994472446958122107028133142438347983,\\n            60783858348513431507842163713811445103610436806650599349647377026990568035512\\n        ];\\n\\n        return hashes[index];\\n    }\\n\\n    function percentMul(uint256 value, uint256 percentage) internal pure returns (uint256 result) {\\n    // to avoid overflow, value <= (type(uint256).max - HALF_PERCENTAGE_FACTOR) / percentage\\n    assembly {\\n      if iszero(\\n        or(\\n          iszero(percentage),\\n          iszero(gt(value, div(sub(not(0), HALF_PERCENTAGE_FACTOR), percentage)))\\n        )\\n      ) {\\n        revert(0, 0)\\n      }\\n\\n      result := div(add(mul(value, percentage), HALF_PERCENTAGE_FACTOR), PERCENTAGE_FACTOR)\\n    }\\n  }\\n\\n    function executeFlashLoanSimple(\\n        address receiverAddress,\\n        uint256 amount\\n    ) external {\\n\\n        IFlashLoanReceiver receiver = IFlashLoanReceiver(receiverAddress);\\n        uint256 fee = percentMul(amount, loanPercent);\\n        IWETH9(weth).transfer(receiverAddress, amount);\\n\\n        require(\\n        receiver.executeOperation(\\n            amount,\\n            fee,\\n            msg.sender\\n        ),\\n        \\\"INVALID_FLASHLOAN_EXECUTOR_RETURN\\\"\\n        );\\n\\n        uint256 amountPlusPremium = amount + fee;\\n\\n        IWETH9(weth).transferFrom(\\n            receiverAddress,\\n            address(this),\\n            amountPlusPremium\\n        );\\n\\n        IWETH9(weth).withdraw(fee);\\n        relayer.transfer(fee);\\n        \\n        emit FlashLoanEvent(\\n            receiverAddress,\\n            msg.sender,\\n            amount,\\n            fee\\n        );\\n    }\\n}\",\"keccak256\":\"0xac8203252e0806334a06c35d941b58b597a28bae5f49020186afcc0c4e8ee533\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052600a600260146101000a81548160ff021916908360ff16021790555067016345785d8a00006003553480156200003957600080fd5b50604051620026723803806200267283398181016040528101906200005f919062000268565b600160008190555084600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081608081815250505050505050620002f0565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001b08262000183565b9050919050565b620001c281620001a3565b8114620001ce57600080fd5b50565b600081519050620001e281620001b7565b92915050565b6000620001f58262000183565b9050919050565b6200020781620001e8565b81146200021357600080fd5b50565b6000815190506200022781620001fc565b92915050565b6000819050919050565b62000242816200022d565b81146200024e57600080fd5b50565b600081519050620002628162000237565b92915050565b600080600080600060a086880312156200028757620002866200017e565b5b60006200029788828901620001d1565b9550506020620002aa88828901620001d1565b9450506040620002bd8882890162000216565b9350506060620002d08882890162000251565b9250506080620002e38882890162000216565b9150509295509295909350565b6080516123666200030c6000396000610c8101526123666000f3fe6080604052600436106100a75760003560e01c8063b8e7956411610064578063b8e79564146101c3578063c78784d7146101ee578063cc98136e14610217578063d21e82ab14610240578063d54000471461027d578063ed33639f146102ba576100a7565b80630be4f422146100ac57806312ad7381146100d75780632b7ac3f31461011457806349ce89971461013f5780638bca6d161461017c578063b6b55f25146101a7575b600080fd5b3480156100b857600080fd5b506100c16102e5565b6040516100ce9190611335565b60405180910390f35b3480156100e357600080fd5b506100fe60048036038101906100f9919061138b565b6102eb565b60405161010b91906113d3565b60405180910390f35b34801561012057600080fd5b5061012961030b565b604051610136919061142f565b60405180910390f35b34801561014b57600080fd5b506101666004803603810190610161919061138b565b610331565b60405161017391906113d3565b60405180910390f35b34801561018857600080fd5b50610191610351565b60405161019e9190611335565b60405180910390f35b6101c160048036038101906101bc919061138b565b610357565b005b3480156101cf57600080fd5b506101d8610893565b6040516101e59190611466565b60405180910390f35b3480156101fa57600080fd5b5061021560048036038101906102109190611679565b6108a6565b005b34801561022357600080fd5b5061023e6004803603810190610239919061170e565b610c74565b005b34801561024c57600080fd5b506102676004803603810190610262919061138b565b611009565b60405161027491906113d3565b60405180910390f35b34801561028957600080fd5b506102a4600480360381019061029f919061177a565b611029565b6040516102b19190611335565b60405180910390f35b3480156102c657600080fd5b506102cf611041565b6040516102dc9190611806565b60405180910390f35b60045481565b60086020528060005260406000206000915054906101000a900460ff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b6020528060005260406000206000915054906101000a900460ff1681565b60035481565b61035f611067565b600034146103a2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610399906118a4565b60405180910390fd5b600b600082815260200190815260200160002060009054906101000a900460ff161561040557806040517f758b55390000000000000000000000000000000000000000000000000000000081526004016103fc9190611335565b60405180910390fd5b6001600260149054906101000a900460ff1660026104239190611a26565b61042d9190611a71565b6004541115610468576040517fef5ccf6600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006104726112d6565b61047a6112f9565b6000600454905060008590506000806000600267ffffffffffffffff8111156104a6576104a5611497565b5b6040519080825280602002602001820160405280156104d45781602001602082028036833780820191505090505b50905060005b600260149054906101000a900460ff1660ff168160ff16101561072e578460096000600260149054906101000a900460ff1660ff1660ff1681526020019081526020016000208190555060006002876105339190611ad4565b036105a2578492506105478160ff166110ad565b93506105558160ff166110ad565b888260ff16600a811061056b5761056a611b05565b5b6020020181815250506000878260ff16600a811061058c5761058b611b05565b5b602002019060ff16908160ff1681525050610624565b600960008260ff1660ff168152602001908152602001600020549250849350600960008260ff1660ff16815260200190815260200160002054888260ff16600a81106105f1576105f0611b05565b5b6020020181815250506001878260ff16600a811061061257610611611b05565b5b602002019060ff16908160ff16815250505b828260008151811061063957610638611b05565b5b602002602001018181525050838260018151811061065a57610659611b05565b5b6020026020010181815250506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632357940f848d6040518363ffffffff1660e01b81526004016106c5929190611bf2565b602060405180830381865afa1580156106e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107069190611c37565b90508095506002876107189190611c64565b965050808061072690611c95565b9150506104da565b508397506001600860008a815260200190815260200160002060006101000a81548160ff02191690831515021790555060046000815461076d90611cbe565b919050819055506001600b60008b815260200190815260200160002060006101000a81548160ff021916908315150217905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33306003546040518463ffffffff1660e01b815260040161080193929190611d06565b6020604051808303816000875af1158015610820573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108449190611d69565b507fe6ab8667cb740d6c65a4ad321c031eb42f6c5085d5753238d1b2e1e370c1348388888860405161087893929190611ec5565b60405180910390a1505050505050505061089061129f565b50565b600260149054906101000a900460ff1681565b6108ae611067565b6000816000600281106108c4576108c3611b05565b5b602002015190506000826001600281106108e1576108e0611b05565b5b602002015190506008600083815260200190815260200160002060009054906101000a900460ff1661093f576040517f504570e300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600a600082815260200190815260200160002060009054906101000a900460ff1615610997576040517fcad2ae0200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1687878760405180606001604052808881526020018781526020013373ffffffffffffffffffffffffffffffffffffffff16815250604051602401610a199493929190612104565b6040516020818303038152906040527f11479fea000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610aa391906121bc565b6000604051808303816000865af19150503d8060008114610ae0576040519150601f19603f3d011682016040523d82523d6000602084013e610ae5565b606091505b5050905080610b20576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600a600084815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb336003546040518363ffffffff1660e01b8152600401610bad9291906121d3565b6020604051808303816000875af1158015610bcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf09190611d69565b905080610c29576040517ff499da2000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b653384604051610c5a9291906121d3565b60405180910390a150505050610c6e61129f565b50505050565b60008290506000610ca5837f00000000000000000000000000000000000000000000000000000000000000006112a9565b9050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856040518363ffffffff1660e01b8152600401610d049291906121d3565b6020604051808303816000875af1158015610d23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d479190611d69565b508173ffffffffffffffffffffffffffffffffffffffff1663d694ca768483336040518463ffffffff1660e01b8152600401610d85939291906121fc565b6020604051808303816000875af1158015610da4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc89190611d69565b610e07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dfe906122a5565b60405180910390fd5b60008184610e1591906122c5565b9050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8630846040518463ffffffff1660e01b8152600401610e7693929190611d06565b6020604051808303816000875af1158015610e95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb99190611d69565b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d836040518263ffffffff1660e01b8152600401610f159190611335565b600060405180830381600087803b158015610f2f57600080fd5b505af1158015610f43573d6000803e3d6000fd5b50505050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610faf573d6000803e3d6000fd5b508473ffffffffffffffffffffffffffffffffffffffff167fd9dbfec6e007ef75e4fe09acaaa24198647ca8101b9a659f7668e85e0ff7cc58338685604051610ffa939291906122f9565b60405180910390a25050505050565b600a6020528060005260406000206000915054906101000a900460ff1681565b60096020528060005260406000206000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6002600054036110a3576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600081905550565b600060098211156110f557816040517f696ae7e40000000000000000000000000000000000000000000000000000000081526004016110ec9190611335565b60405180910390fd5b60006040518061014001604052807f1952870011f8830de55c2491b3afa717413f52441bf1fcd3136fb7db58fb09a581526020017f301b795fb7344f3bf046234240a5b66b895524cbcf47cf4be534e117a176b60181526020017f06313472f32745f4a521938f01c60cc112d03546cb00a6014607c4d1d985be8a81526020017fc0e7c514ac37d3720b1811f4ba3af0175987a80987688a44422d8724e8a1b56281526020017f239370c99c1b403ec0799e0e65a43bf2af3172b3a9a27ec4fe877137f579a76a81526020017ff3ce4c667c8f9d139ec60c5ed39d42d9cd3b641c57005657baea83e9788ca5f881526020017f35dc57b3893c812248537f75b0d7754dc4d61e5608c15d970f21736add549f8481526020017f0868e6a8756aba8fbffbab4d2d495b88473b0beeeb86fe14a5d2c70a571a196881526020017f02c1605f06250f45141948a5224dc808254a48270efadeae1be45b4b668004cf81526020017f866271d47cfa03017c5985181022d999d84730e0e8648a5ad9805bafb866d4b881525090508083600a811061129257611291611b05565b5b6020020151915050919050565b6001600081905550565b60008161138860001903048311158215176112c357600080fd5b6127106113888385020104905092915050565b604051806101400160405280600a90602082028036833780820191505090505090565b604051806101400160405280600a90602082028036833780820191505090505090565b6000819050919050565b61132f8161131c565b82525050565b600060208201905061134a6000830184611326565b92915050565b6000604051905090565b600080fd5b6113688161131c565b811461137357600080fd5b50565b6000813590506113858161135f565b92915050565b6000602082840312156113a1576113a061135a565b5b60006113af84828501611376565b91505092915050565b60008115159050919050565b6113cd816113b8565b82525050565b60006020820190506113e860008301846113c4565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611419826113ee565b9050919050565b6114298161140e565b82525050565b60006020820190506114446000830184611420565b92915050565b600060ff82169050919050565b6114608161144a565b82525050565b600060208201905061147b6000830184611457565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6114cf82611486565b810181811067ffffffffffffffff821117156114ee576114ed611497565b5b80604052505050565b6000611501611350565b905061150d82826114c6565b919050565b600067ffffffffffffffff82111561152d5761152c611497565b5b602082029050919050565b600080fd5b600061155061154b84611512565b6114f7565b9050806020840283018581111561156a57611569611538565b5b835b81811015611593578061157f8882611376565b84526020840193505060208101905061156c565b5050509392505050565b600082601f8301126115b2576115b1611481565b5b60026115bf84828561153d565b91505092915050565b600067ffffffffffffffff8211156115e3576115e2611497565b5b602082029050919050565b60006116016115fc846115c8565b6114f7565b9050806040840283018581111561161b5761161a611538565b5b835b818110156116445780611630888261159d565b84526020840193505060408101905061161d565b5050509392505050565b600082601f83011261166357611662611481565b5b60026116708482856115ee565b91505092915050565b60008060008061014085870312156116945761169361135a565b5b60006116a28782880161159d565b94505060406116b38782880161164e565b93505060c06116c48782880161159d565b9250506101006116d68782880161159d565b91505092959194509250565b6116eb8161140e565b81146116f657600080fd5b50565b600081359050611708816116e2565b92915050565b600080604083850312156117255761172461135a565b5b6000611733858286016116f9565b925050602061174485828601611376565b9150509250929050565b6117578161144a565b811461176257600080fd5b50565b6000813590506117748161174e565b92915050565b6000602082840312156117905761178f61135a565b5b600061179e84828501611765565b91505092915050565b6000819050919050565b60006117cc6117c76117c2846113ee565b6117a7565b6113ee565b9050919050565b60006117de826117b1565b9050919050565b60006117f0826117d3565b9050919050565b611800816117e5565b82525050565b600060208201905061181b60008301846117f7565b92915050565b600082825260208201905092915050565b7f4554482076616c756520697320737570706f73656420746f206265203020666f60008201527f7220455243323020696e7374616e636500000000000000000000000000000000602082015250565b600061188e603083611821565b915061189982611832565b604082019050919050565b600060208201905081810360008301526118bd81611881565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b600185111561194a57808604811115611926576119256118c4565b5b60018516156119355780820291505b8081029050611943856118f3565b945061190a565b94509492505050565b6000826119635760019050611a1f565b816119715760009050611a1f565b81600181146119875760028114611991576119c0565b6001915050611a1f565b60ff8411156119a3576119a26118c4565b5b8360020a9150848211156119ba576119b96118c4565b5b50611a1f565b5060208310610133831016604e8410600b84101617156119f55782820a9050838111156119f0576119ef6118c4565b5b611a1f565b611a028484846001611900565b92509050818404811115611a1957611a186118c4565b5b81810290505b9392505050565b6000611a318261131c565b9150611a3c8361144a565b9250611a697fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484611953565b905092915050565b6000611a7c8261131c565b9150611a878361131c565b9250828203905081811115611a9f57611a9e6118c4565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611adf8261131c565b9150611aea8361131c565b925082611afa57611af9611aa5565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611b698161131c565b82525050565b6000611b7b8383611b60565b60208301905092915050565b6000602082019050919050565b6000611b9f82611b34565b611ba98185611b3f565b9350611bb483611b50565b8060005b83811015611be5578151611bcc8882611b6f565b9750611bd783611b87565b925050600181019050611bb8565b5085935050505092915050565b60006040820190508181036000830152611c0c8185611b94565b9050611c1b6020830184611326565b9392505050565b600081519050611c318161135f565b92915050565b600060208284031215611c4d57611c4c61135a565b5b6000611c5b84828501611c22565b91505092915050565b6000611c6f8261131c565b9150611c7a8361131c565b925082611c8a57611c89611aa5565b5b828204905092915050565b6000611ca08261144a565b915060ff8203611cb357611cb26118c4565b5b600182019050919050565b6000611cc98261131c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611cfb57611cfa6118c4565b5b600182019050919050565b6000606082019050611d1b6000830186611420565b611d286020830185611420565b611d356040830184611326565b949350505050565b611d46816113b8565b8114611d5157600080fd5b50565b600081519050611d6381611d3d565b92915050565b600060208284031215611d7f57611d7e61135a565b5b6000611d8d84828501611d54565b91505092915050565b6000600a9050919050565b600081905092915050565b6000819050919050565b6000602082019050919050565b611dcc81611d96565b611dd68184611da1565b9250611de182611dac565b8060005b83811015611e12578151611df98782611b6f565b9650611e0483611db6565b925050600181019050611de5565b505050505050565b6000600a9050919050565b600081905092915050565b6000819050919050565b611e438161144a565b82525050565b6000611e558383611e3a565b60208301905092915050565b6000602082019050919050565b611e7781611e1a565b611e818184611e25565b9250611e8c82611e30565b8060005b83811015611ebd578151611ea48782611e49565b9650611eaf83611e61565b925050600181019050611e90565b505050505050565b60006102a082019050611edb6000830186611326565b611ee86020830185611dc3565b611ef6610160830184611e6e565b949350505050565b600060029050919050565b600081905092915050565b6000819050919050565b6000602082019050919050565b611f3481611efe565b611f3e8184611f09565b9250611f4982611f14565b8060005b83811015611f7a578151611f618782611b6f565b9650611f6c83611f1e565b925050600181019050611f4d565b505050505050565b600060029050919050565b600081905092915050565b6000819050919050565b600081905092915050565b611fb681611efe565b611fc08184611fa2565b9250611fcb82611f14565b8060005b83811015611ffc578151611fe38782611b6f565b9650611fee83611f1e565b925050600181019050611fcf565b505050505050565b60006120108383611fad565b60408301905092915050565b6000602082019050919050565b61203281611f82565b61203c8184611f8d565b925061204782611f98565b8060005b8381101561207857815161205f8782612004565b965061206a8361201c565b92505060018101905061204b565b505050505050565b600060039050919050565b600081905092915050565b6000819050919050565b6000602082019050919050565b6120b681612080565b6120c0818461208b565b92506120cb82612096565b8060005b838110156120fc5781516120e38782611b6f565b96506120ee836120a0565b9250506001810190506120cf565b505050505050565b60006101608201905061211a6000830187611f2b565b6121276040830186612029565b61213460c0830185611f2b565b6121426101008301846120ad565b95945050505050565b600081519050919050565b600081905092915050565b60005b8381101561217f578082015181840152602081019050612164565b60008484015250505050565b60006121968261214b565b6121a08185612156565b93506121b0818560208601612161565b80840191505092915050565b60006121c8828461218b565b915081905092915050565b60006040820190506121e86000830185611420565b6121f56020830184611326565b9392505050565b60006060820190506122116000830186611326565b61221e6020830185611326565b61222b6040830184611420565b949350505050565b7f494e56414c49445f464c4153484c4f414e5f4558454355544f525f524554555260008201527f4e00000000000000000000000000000000000000000000000000000000000000602082015250565b600061228f602183611821565b915061229a82612233565b604082019050919050565b600060208201905081810360008301526122be81612282565b9050919050565b60006122d08261131c565b91506122db8361131c565b92508282019050808211156122f3576122f26118c4565b5b92915050565b600060608201905061230e6000830186611420565b61231b6020830185611326565b6123286040830184611326565b94935050505056fea2646970667358221220c486b15149597e0e267a29b4b98aa55b3ddc7b4ecd8fc9fc89b48fd22998cc1664736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106100a75760003560e01c8063b8e7956411610064578063b8e79564146101c3578063c78784d7146101ee578063cc98136e14610217578063d21e82ab14610240578063d54000471461027d578063ed33639f146102ba576100a7565b80630be4f422146100ac57806312ad7381146100d75780632b7ac3f31461011457806349ce89971461013f5780638bca6d161461017c578063b6b55f25146101a7575b600080fd5b3480156100b857600080fd5b506100c16102e5565b6040516100ce9190611335565b60405180910390f35b3480156100e357600080fd5b506100fe60048036038101906100f9919061138b565b6102eb565b60405161010b91906113d3565b60405180910390f35b34801561012057600080fd5b5061012961030b565b604051610136919061142f565b60405180910390f35b34801561014b57600080fd5b506101666004803603810190610161919061138b565b610331565b60405161017391906113d3565b60405180910390f35b34801561018857600080fd5b50610191610351565b60405161019e9190611335565b60405180910390f35b6101c160048036038101906101bc919061138b565b610357565b005b3480156101cf57600080fd5b506101d8610893565b6040516101e59190611466565b60405180910390f35b3480156101fa57600080fd5b5061021560048036038101906102109190611679565b6108a6565b005b34801561022357600080fd5b5061023e6004803603810190610239919061170e565b610c74565b005b34801561024c57600080fd5b506102676004803603810190610262919061138b565b611009565b60405161027491906113d3565b60405180910390f35b34801561028957600080fd5b506102a4600480360381019061029f919061177a565b611029565b6040516102b19190611335565b60405180910390f35b3480156102c657600080fd5b506102cf611041565b6040516102dc9190611806565b60405180910390f35b60045481565b60086020528060005260406000206000915054906101000a900460ff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b6020528060005260406000206000915054906101000a900460ff1681565b60035481565b61035f611067565b600034146103a2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610399906118a4565b60405180910390fd5b600b600082815260200190815260200160002060009054906101000a900460ff161561040557806040517f758b55390000000000000000000000000000000000000000000000000000000081526004016103fc9190611335565b60405180910390fd5b6001600260149054906101000a900460ff1660026104239190611a26565b61042d9190611a71565b6004541115610468576040517fef5ccf6600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006104726112d6565b61047a6112f9565b6000600454905060008590506000806000600267ffffffffffffffff8111156104a6576104a5611497565b5b6040519080825280602002602001820160405280156104d45781602001602082028036833780820191505090505b50905060005b600260149054906101000a900460ff1660ff168160ff16101561072e578460096000600260149054906101000a900460ff1660ff1660ff1681526020019081526020016000208190555060006002876105339190611ad4565b036105a2578492506105478160ff166110ad565b93506105558160ff166110ad565b888260ff16600a811061056b5761056a611b05565b5b6020020181815250506000878260ff16600a811061058c5761058b611b05565b5b602002019060ff16908160ff1681525050610624565b600960008260ff1660ff168152602001908152602001600020549250849350600960008260ff1660ff16815260200190815260200160002054888260ff16600a81106105f1576105f0611b05565b5b6020020181815250506001878260ff16600a811061061257610611611b05565b5b602002019060ff16908160ff16815250505b828260008151811061063957610638611b05565b5b602002602001018181525050838260018151811061065a57610659611b05565b5b6020026020010181815250506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632357940f848d6040518363ffffffff1660e01b81526004016106c5929190611bf2565b602060405180830381865afa1580156106e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107069190611c37565b90508095506002876107189190611c64565b965050808061072690611c95565b9150506104da565b508397506001600860008a815260200190815260200160002060006101000a81548160ff02191690831515021790555060046000815461076d90611cbe565b919050819055506001600b60008b815260200190815260200160002060006101000a81548160ff021916908315150217905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33306003546040518463ffffffff1660e01b815260040161080193929190611d06565b6020604051808303816000875af1158015610820573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108449190611d69565b507fe6ab8667cb740d6c65a4ad321c031eb42f6c5085d5753238d1b2e1e370c1348388888860405161087893929190611ec5565b60405180910390a1505050505050505061089061129f565b50565b600260149054906101000a900460ff1681565b6108ae611067565b6000816000600281106108c4576108c3611b05565b5b602002015190506000826001600281106108e1576108e0611b05565b5b602002015190506008600083815260200190815260200160002060009054906101000a900460ff1661093f576040517f504570e300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600a600082815260200190815260200160002060009054906101000a900460ff1615610997576040517fcad2ae0200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1687878760405180606001604052808881526020018781526020013373ffffffffffffffffffffffffffffffffffffffff16815250604051602401610a199493929190612104565b6040516020818303038152906040527f11479fea000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610aa391906121bc565b6000604051808303816000865af19150503d8060008114610ae0576040519150601f19603f3d011682016040523d82523d6000602084013e610ae5565b606091505b5050905080610b20576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600a600084815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb336003546040518363ffffffff1660e01b8152600401610bad9291906121d3565b6020604051808303816000875af1158015610bcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf09190611d69565b905080610c29576040517ff499da2000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b653384604051610c5a9291906121d3565b60405180910390a150505050610c6e61129f565b50505050565b60008290506000610ca5837f00000000000000000000000000000000000000000000000000000000000000006112a9565b9050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856040518363ffffffff1660e01b8152600401610d049291906121d3565b6020604051808303816000875af1158015610d23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d479190611d69565b508173ffffffffffffffffffffffffffffffffffffffff1663d694ca768483336040518463ffffffff1660e01b8152600401610d85939291906121fc565b6020604051808303816000875af1158015610da4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc89190611d69565b610e07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dfe906122a5565b60405180910390fd5b60008184610e1591906122c5565b9050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8630846040518463ffffffff1660e01b8152600401610e7693929190611d06565b6020604051808303816000875af1158015610e95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb99190611d69565b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d836040518263ffffffff1660e01b8152600401610f159190611335565b600060405180830381600087803b158015610f2f57600080fd5b505af1158015610f43573d6000803e3d6000fd5b50505050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610faf573d6000803e3d6000fd5b508473ffffffffffffffffffffffffffffffffffffffff167fd9dbfec6e007ef75e4fe09acaaa24198647ca8101b9a659f7668e85e0ff7cc58338685604051610ffa939291906122f9565b60405180910390a25050505050565b600a6020528060005260406000206000915054906101000a900460ff1681565b60096020528060005260406000206000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6002600054036110a3576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600081905550565b600060098211156110f557816040517f696ae7e40000000000000000000000000000000000000000000000000000000081526004016110ec9190611335565b60405180910390fd5b60006040518061014001604052807f1952870011f8830de55c2491b3afa717413f52441bf1fcd3136fb7db58fb09a581526020017f301b795fb7344f3bf046234240a5b66b895524cbcf47cf4be534e117a176b60181526020017f06313472f32745f4a521938f01c60cc112d03546cb00a6014607c4d1d985be8a81526020017fc0e7c514ac37d3720b1811f4ba3af0175987a80987688a44422d8724e8a1b56281526020017f239370c99c1b403ec0799e0e65a43bf2af3172b3a9a27ec4fe877137f579a76a81526020017ff3ce4c667c8f9d139ec60c5ed39d42d9cd3b641c57005657baea83e9788ca5f881526020017f35dc57b3893c812248537f75b0d7754dc4d61e5608c15d970f21736add549f8481526020017f0868e6a8756aba8fbffbab4d2d495b88473b0beeeb86fe14a5d2c70a571a196881526020017f02c1605f06250f45141948a5224dc808254a48270efadeae1be45b4b668004cf81526020017f866271d47cfa03017c5985181022d999d84730e0e8648a5ad9805bafb866d4b881525090508083600a811061129257611291611b05565b5b6020020151915050919050565b6001600081905550565b60008161138860001903048311158215176112c357600080fd5b6127106113888385020104905092915050565b604051806101400160405280600a90602082028036833780820191505090505090565b604051806101400160405280600a90602082028036833780820191505090505090565b6000819050919050565b61132f8161131c565b82525050565b600060208201905061134a6000830184611326565b92915050565b6000604051905090565b600080fd5b6113688161131c565b811461137357600080fd5b50565b6000813590506113858161135f565b92915050565b6000602082840312156113a1576113a061135a565b5b60006113af84828501611376565b91505092915050565b60008115159050919050565b6113cd816113b8565b82525050565b60006020820190506113e860008301846113c4565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611419826113ee565b9050919050565b6114298161140e565b82525050565b60006020820190506114446000830184611420565b92915050565b600060ff82169050919050565b6114608161144a565b82525050565b600060208201905061147b6000830184611457565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6114cf82611486565b810181811067ffffffffffffffff821117156114ee576114ed611497565b5b80604052505050565b6000611501611350565b905061150d82826114c6565b919050565b600067ffffffffffffffff82111561152d5761152c611497565b5b602082029050919050565b600080fd5b600061155061154b84611512565b6114f7565b9050806020840283018581111561156a57611569611538565b5b835b81811015611593578061157f8882611376565b84526020840193505060208101905061156c565b5050509392505050565b600082601f8301126115b2576115b1611481565b5b60026115bf84828561153d565b91505092915050565b600067ffffffffffffffff8211156115e3576115e2611497565b5b602082029050919050565b60006116016115fc846115c8565b6114f7565b9050806040840283018581111561161b5761161a611538565b5b835b818110156116445780611630888261159d565b84526020840193505060408101905061161d565b5050509392505050565b600082601f83011261166357611662611481565b5b60026116708482856115ee565b91505092915050565b60008060008061014085870312156116945761169361135a565b5b60006116a28782880161159d565b94505060406116b38782880161164e565b93505060c06116c48782880161159d565b9250506101006116d68782880161159d565b91505092959194509250565b6116eb8161140e565b81146116f657600080fd5b50565b600081359050611708816116e2565b92915050565b600080604083850312156117255761172461135a565b5b6000611733858286016116f9565b925050602061174485828601611376565b9150509250929050565b6117578161144a565b811461176257600080fd5b50565b6000813590506117748161174e565b92915050565b6000602082840312156117905761178f61135a565b5b600061179e84828501611765565b91505092915050565b6000819050919050565b60006117cc6117c76117c2846113ee565b6117a7565b6113ee565b9050919050565b60006117de826117b1565b9050919050565b60006117f0826117d3565b9050919050565b611800816117e5565b82525050565b600060208201905061181b60008301846117f7565b92915050565b600082825260208201905092915050565b7f4554482076616c756520697320737570706f73656420746f206265203020666f60008201527f7220455243323020696e7374616e636500000000000000000000000000000000602082015250565b600061188e603083611821565b915061189982611832565b604082019050919050565b600060208201905081810360008301526118bd81611881565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b600185111561194a57808604811115611926576119256118c4565b5b60018516156119355780820291505b8081029050611943856118f3565b945061190a565b94509492505050565b6000826119635760019050611a1f565b816119715760009050611a1f565b81600181146119875760028114611991576119c0565b6001915050611a1f565b60ff8411156119a3576119a26118c4565b5b8360020a9150848211156119ba576119b96118c4565b5b50611a1f565b5060208310610133831016604e8410600b84101617156119f55782820a9050838111156119f0576119ef6118c4565b5b611a1f565b611a028484846001611900565b92509050818404811115611a1957611a186118c4565b5b81810290505b9392505050565b6000611a318261131c565b9150611a3c8361144a565b9250611a697fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484611953565b905092915050565b6000611a7c8261131c565b9150611a878361131c565b9250828203905081811115611a9f57611a9e6118c4565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611adf8261131c565b9150611aea8361131c565b925082611afa57611af9611aa5565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611b698161131c565b82525050565b6000611b7b8383611b60565b60208301905092915050565b6000602082019050919050565b6000611b9f82611b34565b611ba98185611b3f565b9350611bb483611b50565b8060005b83811015611be5578151611bcc8882611b6f565b9750611bd783611b87565b925050600181019050611bb8565b5085935050505092915050565b60006040820190508181036000830152611c0c8185611b94565b9050611c1b6020830184611326565b9392505050565b600081519050611c318161135f565b92915050565b600060208284031215611c4d57611c4c61135a565b5b6000611c5b84828501611c22565b91505092915050565b6000611c6f8261131c565b9150611c7a8361131c565b925082611c8a57611c89611aa5565b5b828204905092915050565b6000611ca08261144a565b915060ff8203611cb357611cb26118c4565b5b600182019050919050565b6000611cc98261131c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611cfb57611cfa6118c4565b5b600182019050919050565b6000606082019050611d1b6000830186611420565b611d286020830185611420565b611d356040830184611326565b949350505050565b611d46816113b8565b8114611d5157600080fd5b50565b600081519050611d6381611d3d565b92915050565b600060208284031215611d7f57611d7e61135a565b5b6000611d8d84828501611d54565b91505092915050565b6000600a9050919050565b600081905092915050565b6000819050919050565b6000602082019050919050565b611dcc81611d96565b611dd68184611da1565b9250611de182611dac565b8060005b83811015611e12578151611df98782611b6f565b9650611e0483611db6565b925050600181019050611de5565b505050505050565b6000600a9050919050565b600081905092915050565b6000819050919050565b611e438161144a565b82525050565b6000611e558383611e3a565b60208301905092915050565b6000602082019050919050565b611e7781611e1a565b611e818184611e25565b9250611e8c82611e30565b8060005b83811015611ebd578151611ea48782611e49565b9650611eaf83611e61565b925050600181019050611e90565b505050505050565b60006102a082019050611edb6000830186611326565b611ee86020830185611dc3565b611ef6610160830184611e6e565b949350505050565b600060029050919050565b600081905092915050565b6000819050919050565b6000602082019050919050565b611f3481611efe565b611f3e8184611f09565b9250611f4982611f14565b8060005b83811015611f7a578151611f618782611b6f565b9650611f6c83611f1e565b925050600181019050611f4d565b505050505050565b600060029050919050565b600081905092915050565b6000819050919050565b600081905092915050565b611fb681611efe565b611fc08184611fa2565b9250611fcb82611f14565b8060005b83811015611ffc578151611fe38782611b6f565b9650611fee83611f1e565b925050600181019050611fcf565b505050505050565b60006120108383611fad565b60408301905092915050565b6000602082019050919050565b61203281611f82565b61203c8184611f8d565b925061204782611f98565b8060005b8381101561207857815161205f8782612004565b965061206a8361201c565b92505060018101905061204b565b505050505050565b600060039050919050565b600081905092915050565b6000819050919050565b6000602082019050919050565b6120b681612080565b6120c0818461208b565b92506120cb82612096565b8060005b838110156120fc5781516120e38782611b6f565b96506120ee836120a0565b9250506001810190506120cf565b505050505050565b60006101608201905061211a6000830187611f2b565b6121276040830186612029565b61213460c0830185611f2b565b6121426101008301846120ad565b95945050505050565b600081519050919050565b600081905092915050565b60005b8381101561217f578082015181840152602081019050612164565b60008484015250505050565b60006121968261214b565b6121a08185612156565b93506121b0818560208601612161565b80840191505092915050565b60006121c8828461218b565b915081905092915050565b60006040820190506121e86000830185611420565b6121f56020830184611326565b9392505050565b60006060820190506122116000830186611326565b61221e6020830185611326565b61222b6040830184611420565b949350505050565b7f494e56414c49445f464c4153484c4f414e5f4558454355544f525f524554555260008201527f4e00000000000000000000000000000000000000000000000000000000000000602082015250565b600061228f602183611821565b915061229a82612233565b604082019050919050565b600060208201905081810360008301526122be81612282565b9050919050565b60006122d08261131c565b91506122db8361131c565b92508282019050808211156122f3576122f26118c4565b5b92915050565b600060608201905061230e6000830186611420565b61231b6020830185611326565b6123286040830184611326565b94935050505056fea2646970667358221220c486b15149597e0e267a29b4b98aa55b3ddc7b4ecd8fc9fc89b48fd22998cc1664736f6c63430008140033",
  "devdoc": {
    "errors": {
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "src/Tornado.sol:Tornado",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 429,
        "contract": "src/Tornado.sol:Tornado",
        "label": "hasher",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(Hasher)259"
      },
      {
        "astId": 431,
        "contract": "src/Tornado.sol:Tornado",
        "label": "verifier",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 434,
        "contract": "src/Tornado.sol:Tornado",
        "label": "treeLevel",
        "offset": 20,
        "slot": "2",
        "type": "t_uint8"
      },
      {
        "astId": 439,
        "contract": "src/Tornado.sol:Tornado",
        "label": "denomination",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 441,
        "contract": "src/Tornado.sol:Tornado",
        "label": "nextLeafIndex",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 443,
        "contract": "src/Tornado.sol:Tornado",
        "label": "weth",
        "offset": 0,
        "slot": "5",
        "type": "t_address_payable"
      },
      {
        "astId": 450,
        "contract": "src/Tornado.sol:Tornado",
        "label": "feeCollected",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 452,
        "contract": "src/Tornado.sol:Tornado",
        "label": "relayer",
        "offset": 0,
        "slot": "7",
        "type": "t_address_payable"
      },
      {
        "astId": 469,
        "contract": "src/Tornado.sol:Tornado",
        "label": "knownRoots",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 473,
        "contract": "src/Tornado.sol:Tornado",
        "label": "lastLevelHash",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint8,t_uint256)"
      },
      {
        "astId": 477,
        "contract": "src/Tornado.sol:Tornado",
        "label": "nullifiers",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 481,
        "contract": "src/Tornado.sol:Tornado",
        "label": "commitments",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Hasher)259": {
        "encoding": "inplace",
        "label": "contract Hasher",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint8,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}